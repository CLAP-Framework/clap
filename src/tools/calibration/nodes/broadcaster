#!/usr/bin/env python

import json
import time

import rospy
import tf.transformations as tft
import tf2_ros as tf2

from zzz_common.params import StaticCameraInfoBroadcaster, parse_private_args
from sensor_msgs.msg import CameraInfo
from geometry_msgs.msg import TransformStamped

def create_transform(item):
    transform = TransformStamped()
    transform.header.stamp = rospy.Time.now()
    transform.header.frame_id = item['frame_id']
    transform.child_frame_id = item['child_frame_id']
    transform.transform.translation.x = item['txyz'][0]
    transform.transform.translation.y = item['txyz'][1]
    transform.transform.translation.z = item['txyz'][2]
    transform.transform.rotation.x = item['qxyzw'][0]
    transform.transform.rotation.y = item['qxyzw'][1]
    transform.transform.rotation.z = item['qxyzw'][2]
    transform.transform.rotation.w = item['qxyzw'][3]
    return transform

def create_camera_info(item):
    caminfo = CameraInfo()
    caminfo.header.stamp = rospy.Time.now()
    caminfo.header.frame_id = item['frame_id']

    caminfo.width = item['width']    
    caminfo.height = item['height']
    caminfo.distortion_model = 'plumb_bob'

    caminfo.K = list(item['K'])
    caminfo.D = list(item['D'])
    caminfo.R = list(item['R'])
    caminfo.P = list(item['P'])

    return caminfo

if __name__ == '__main__':
    rospy.init_node('calib_broadcaster', anonymous=True)
    params = parse_private_args(
        calib_file="config/sensors/white_mkz.json", # calibration file location
        rate=5 # frequency of publishing calibration data, unit is Hz
    )

    calib_params = None
    with open(params.calib_file, 'r') as fin:
        calib_params = json.load(fin)

    tfreporter = tf2.StaticTransformBroadcaster()
    camreporter = StaticCameraInfoBroadcaster()

    rate = rospy.Rate(params.rate)
    rospy.logdebug("Start to broadcast calibration transformations")
    while not rospy.is_shutdown():
        try:
            for extri in calib_params['extrinsics']:
                tfreporter.sendTransform(create_transform(extri))
            for intri in calib_params['intrinsics']:
                camreporter.sendCameraInfo(create_camera_info(intri))

            rate.sleep()
        except rospy.exceptions.ROSTimeMovedBackwardsException:
            continue
