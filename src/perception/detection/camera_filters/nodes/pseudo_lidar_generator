#!/usr/bin/env python

import rospy
from cv_bridge import CvBridge

import cv2

from zzz_common.params import parse_private_args
from pseudo_lidar.psmnet.pred_disp_module import DisparityNet
from pseudo_lidar.preprocessing.generate_lidar_module import PclGenerator

from sensor_msgs.msg import Image, PointCloud2, PointField, CameraInfo

import message_filters

import pcl
import skimage
import skimage.io
import numpy as np

# XXX: Need torchvision <= 0.2.0
# TODO: Fix carla camera extrinsic coordinate

import pseudo_lidar.preprocessing.kitti_util as kitti_util
import pseudo_lidar.preprocessing.cam_velo_utils as cam_velo_utils

import argparse
import os

class detection3dPseudeLidarNode(object):
    def __init__(self):
        params = parse_private_args(
            input_topic_left="/zzz/driver/image_raw",
            input_topic_right="/zzz/driver/image_raw",
            camera_info_left="/zzz/driver/camera_info",
            output_topic="points_pseudo",
            target_frame="base_link" # TODO: which frame
        )
        self.args_disp = parse_private_args(
            KITTI="2015", 
            datapath='/scratch/datasets/kitti2015/testing/', 
            # XXX: need to download weights
            loadmodel="/home/carla/Carla/zzz/src/perception/detection/camera_filters/src/pseudo_lidar/psmnet/kitti_3d/finetune_300.tar",
            model='stackhourglass', 
            maxdisp=192,
            no_cuda=False,
            seed=1,
            save_path='finetune_1000',
            save_figure=False
        )
        self.args_gen_lidar = parse_private_args(
            calib_dir='~/Kitti/object/training/calib', 
            disparity_dir='~/Kitti/object/training/predicted_disparity', 
            save_dir='~/Kitti/object/training/predicted_velodyne',
            max_high=0 # XXX: Extrinsic related
        )

        # network initialization
        self.disp_pred_net = DisparityNet(self.args_disp)
        self.pcl_generator = PclGenerator(self.args_gen_lidar)

        self._bridge = CvBridge()
        
        self._publisher = rospy.Publisher(params.pop("output_topic"), PointCloud2, queue_size=1)

        image_left_sub = message_filters.Subscriber(params.input_topic_left, Image)
        image_right_sub = message_filters.Subscriber(params.input_topic_right, Image)
        info_left_sub = message_filters.Subscriber(params.camera_info_left, CameraInfo)

        ts = message_filters.ApproximateTimeSynchronizer([image_left_sub, image_right_sub, info_left_sub], 10,  0.01) # TODO: Make time difference a parameter
        ts.registerCallback(self.callback)
    
    def callback(self, msg_image_left, msg_image_right, info_cam_left):
        self._image_left = self._bridge.imgmsg_to_cv2(msg_image_left, "bgr8")
        self._image_right = self._bridge.imgmsg_to_cv2(msg_image_right, "bgr8")
        self.K_left = info_cam_left.K
        
        # print(self._image_left.shape)
        imgL_o = np.ascontiguousarray(self._image_left.astype('float32'))
        imgR_o = np.ascontiguousarray(self._image_right.astype('float32'))

        img = self.disp_pred_net.run(imgL_o, imgR_o)
        # cv2.imshow("Disparity", img.astype('u1'))
        # cv2.waitKey(1)

        ################# part 2 ###################

        calib = cam_velo_utils.Calibration(self.K_left)

        img = (img*256).astype(np.uint16)/256.
        lidar, valid = self.pcl_generator.run(calib, img, baseline=0.5) # n*3 array

        # pad 1 in the indensity dimension
        # lidar = np.concatenate([lidar, np.ones((lidar.shape[0], 1))], 1) # n*4 array
        lidar = lidar.astype(np.float32)
        imgL_o_valid = imgL_o.reshape([-1, 3])[valid]
        imgL_o_valid_rec = np.array(np.zeros(lidar.shape[0]), dtype=[('b','u1'), ('g','u1'), ('r','u1'), ('a','u1')])
        imgL_o_valid_rec['b'] = imgL_o_valid[:,0]
        imgL_o_valid_rec['g'] = imgL_o_valid[:,1]
        imgL_o_valid_rec['r'] = imgL_o_valid[:,2]
        imgL_o_valid_rec['a'] = np.full((lidar.shape[0],), 255, dtype='u1')
        lidar_rec = np.array(np.zeros(lidar.shape[0]), dtype=[('x','f4'), ('y','f4'), ('z','f4'), ('rgba','u4')])
        lidar_rec['x'] = lidar[:,0]
        lidar_rec['y'] = lidar[:,1]
        lidar_rec['z'] = lidar[:,2]
        lidar_rec['rgba'] = imgL_o_valid_rec.view('u4')
        # print(lidar_rec.dtype, lidar_rec.shape)

        # cloud = pcl.PointCloud(lidar.tolist(), 'xyz')
        # print(cloud.xyz)
        lidar_msg = PointCloud2()
        lidar_msg.header = msg_image_left.header
        lidar_msg.width = lidar_rec.shape[0]
        lidar_msg.height = 1
        lidar_msg.fields = [
            PointField(name='x', offset=0, datatype=PointField.FLOAT32, count=1), 
            PointField(name='y', offset=4, datatype=PointField.FLOAT32, count=1), 
            PointField(name='z', offset=8, datatype=PointField.FLOAT32, count=1),
            PointField(name='rgb', offset=12, datatype=PointField.UINT32, count=1),
        ]
        lidar_msg.is_bigendian = False
        lidar_msg.point_step = 16
        lidar_msg.row_step = 16*lidar_rec.shape[0]
        lidar_msg.is_dense = False
        lidar_msg.data = lidar_rec.tobytes()
        self._publisher.publish(lidar_msg)
        # lidar_msg = cloud.to_msg()
        # lidar_msg.header = msg_image_left.header
        # self._publisher.publish(lidar_msg)

        # lidar.tofile('{}/{}.bin'.format(self.args_gen_lidar.save_dir, predix))
        # print('Finish Depth {}'.format(predix))


if __name__ == "__main__":
    rospy.init_node("pseudo_lidar")
    node = detection3dPseudeLidarNode()
    rospy.spin()

