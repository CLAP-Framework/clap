#!/usr/bin/env python

import rospy
import numpy as np
from zzz_perception_msgs.msg import DetectionBox2DArray, DetectionBoxArray, DetectionBox, DetectionBox2D
from zzz_common.params import parse_private_args
from zzz_perception_detection_camera_filters.ipm import CamIntrExtr

class IPMNode():
    def __init__(self):

        params = parse_private_args(
            input_topic="objects2d_detected",
            output_topic="objects_projected",
            output_3d=True,
        )

        self._sub = rospy.Subscriber(params.input_topic, DetectionBox2DArray, self.obj_callback)
        self.output_3d = params.output_3d
        if self.output_3d:
            self._pub = rospy.Publisher(params.output_topic, DetectionBoxArray, queue_size=1)
        else:
            self._pub = rospy.Publisher(params.output_topic, DetectionBox2DArray, queue_size=1)

        self._default_z = 1
        self._default_height = 2
        self._default_width = 2
        self._default_length = 2

        # initialize camera geometry model
        # TODO: read from camera info
        self._cam = CamIntrExtr(0, 0, 0, 1.6)
        self._cam.setIntr(400, 300, fov=100)

    def obj_callback(self, detections):
        if self.output_3d:
            array = DetectionBoxArray()
        else:
            array = DetectionBox2DArray()

        for det in detections.detections:
            u = np.array([det.bbox.pose.x])
            v = np.array([det.bbox.pose.y + det.bbox.dimension.length_y / 2])
            lo, la = self._cam.img2world(u, v)
            
            if self.output_3d:
                newdet = DetectionBox()
                newdet.bbox.pose.pose.position.x = la[0]
                newdet.bbox.pose.pose.position.y = lo[0]
                newdet.bbox.pose.pose.position.z = self._default_z
                
                # FIXME: Distinguish input by projection type
                newdet.bbox.dimension.length_x = self._default_width
                newdet.bbox.dimension.length_y = self._default_length
                newdet.bbox.dimension.length_z = self._default_height

                # XXX: Calculate these result
                # newdet.bbox.pose.covariance = 
                # newdet.bbox.dimension.covariance = 
                newdet.classes = det.classes
                array.detections.append(newdet)

            else:
                newdet = DetectionBox2D()
                newdet.projection_type = DetectionBox2D.PROJECTION_HEV
                newdet.bbox.pose.u = u
                newdet.bbox.pose.v = v

                # XXX: Calculate these result
                # newdet.bbox.pose.covariance = det.bbox.pose.covariance 
                # newdet.bbox.dimension = det.dimension

                newdet.classes = det.classes
                array.detections.append(newdet)

        array.header = detections.header
        self._pub.publish(array)

def calc_real_world_pos(self, x, labelclass):
    u = int(x[0] + x[2])/2
    v = int(x[3])
    u = np.array([u])
    v = np.array([v])
    lo, la = self._cam.img2world(u, v)  #lo front, la right
    pos = (lo[0], la[0], labelclass)
    return pos

if __name__ == "__main__":
    rospy.init_node("ipm_projector")
    node = IPMNode()
    rospy.spin()
