#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import cv2

import numpy as np
import os
import sys

import math

import sys
from yolov3.YoloDetect import YoloDetect

from yolov3.CameraProcess import CameraProcess #PercpVeh, ObjectList

from zzz_perception_msgs.msg import DetectionBox2DArray, DetectionBox2D, ObjectClass

USE_ROS = True
ROS_PUB = True

class CameraProcessRos:
    def __init__(self):


        self.initNetwork()
        self.initRos()
    
    def initNetwork(self):
        self.YoloCam = CameraProcess()
        self.class_dict =	{
            "person": 1,
            "bicycle": 2,
            "car": 3, 
            "motorcycle": 4,
            "airplane": 5,
            "bus": 6, 
            "train": 7, 
            "truck": 8
            }
    
    def initRos(self):
        rospy.init_node('object_detc') # , anonymous=True
        self.bridge = CvBridge()
        rospy.Subscriber("/carla/ego_vehicle/camera/rgb/Wideangle/image_color", Image, self.callbackImg)
        if ROS_PUB:
            self.pub = rospy.Publisher("/carla/object_detection", DetectionBox2DArray, queue_size=10)
        rospy.spin()

    def callbackImg(self, data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "rgb8")
        except CvBridgeError as e:
            print(e)

        cv2.imshow("result", cv_image[:,:,::-1])
        cv2.waitKey(1)
        
        self.inferenceImg(cv_image)

    def inferenceImg(self, img):
        detections = self.YoloCam.process_input_data(img)
        if USE_ROS and ROS_PUB:
            self.rosSend(detections)

    def rosSend(self, detections):
        msg_to_send = DetectionBox2DArray()
        if detections is not None and len(detections) > 0:
            for detection in detections:
                msg_single = DetectionBox2D()
                msg_single.projection_type = DetectionBox2D.PROJECTION_BEV
                msg_single.bbox.pose.x = detection[0]
                msg_single.bbox.pose.y = detection[1]
                msg_class = ObjectClass()
                msg_class.classname = detection[2]
                msg_class.classid = self.class_dict[detection[2]]
                msg_class.score = 1
                msg_single.classes.append(msg_class)
                msg_to_send.detections.append(msg_single)
            self.pub.publish(msg_to_send)
        

if __name__ == '__main__':
    traf = CameraProcessRos()