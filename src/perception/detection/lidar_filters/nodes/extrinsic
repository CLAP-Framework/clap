#!/usr/bin/env python

import rospy

from zzz_common.params import parse_private_args
from sensor_msgs.msg import PointCloud2
from zzz_perception_detection_lidar_filters.transformers import ExtrinsicFilter

class FilterNode():
    def __init__(self):
        params = parse_private_args(
            input_topic="/zzz/drivers/lidar/points_raw",
            output_topic="points_transformed",
            target_frame="base_link"
        )

        self._filter = ExtrinsicFilter(**params)
        self._subscriber = rospy.Subscriber(params.pop("input_topic"), PointCloud2, self.callback)
        self._publisher = rospy.Publisher(params.pop("output_topic"), PointCloud2, queue_size=1)

    def callback(self, msg):
        nmsg = self._filter.filter(msg)
        if nmsg is not None: self._publisher.publish(nmsg)

if __name__ == "__main__":
    rospy.init_node("criteria_filter")
    node = FilterNode()
    rospy.spin()
