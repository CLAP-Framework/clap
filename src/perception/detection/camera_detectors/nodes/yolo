#!/usr/bin/env python

# General imports
import os
import os.path as osp
import sys
import math
import random
import numpy as np

# ROS imports
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
from zzz_perception_msgs.msg import DetectionBox2DArray, DetectionBox2D, ObjectClass
from zzz_common.params import parse_private_args

from cv_bridge import CvBridge, CvBridgeError
import cv2
import time

# YOLO imports
import torch
import yolov3
from yolov3.models import Darknet, load_darknet_weights
from yolov3.utils.datasets import letterbox
from yolov3.utils.utils import non_max_suppression, scale_coords,\
    load_classes, torch_utils

def conversion_class_id(names, id):
    if names[int(id)] == "person":
        id_in_msg = ObjectClass.HUMAN
    elif names[int(id)] == "car" or names[int(id)] == "bus" or names[int(id)] == "truck":
        id_in_msg = ObjectClass.VEHICLE
    elif names[int(id)] == "bicycle" or names[int(id)] == "motorcycle":
        id_in_msg = ObjectClass.CYCLIST
    else:
        return None
    return id_in_msg

class YoloDetect():
    def __init__(self, cfg,
        data_cfg,
        weights,
        names,
        img_size=416, # TODO: Fix size problems
        conf_thres=0.5,
        nms_thres=0.5,
        save_txt=False,
        save_images=False,
        webcam=False):
        
        self.device = torch_utils.select_device()
        self.conf_thres = conf_thres
        self.nms_thres = nms_thres
        self.save_txt = save_txt
        self.save_images = save_images
        self.webcam = webcam
        self.img_size = img_size

        # Initialize model
        self.model = Darknet(cfg, self.img_size)

        # Load weights
        if weights.endswith('.pt'):  # pytorch format
            self.model.load_state_dict(torch.load(weights, map_location=self.device)['model'])
        else:  # darknet format
            load_darknet_weights(self.model, weights)
        self.model.to(self.device).eval()

        # Get classes and colors
        self.classes = load_classes(names)

    def run(self, im0):
        img, _, _, _, _ = letterbox(im0, new_shape=self.img_size)

        # Normalize RGB
        img = img.transpose(2, 0, 1)  # RGB, channel first
        # img = img[:, :, ::-1].transpose(2, 0, 1)  # BGR to RGB, channel first
        img = np.ascontiguousarray(img, dtype=np.float32)  # uint8 to float32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0

        # Get detections
        img = torch.from_numpy(img).unsqueeze(0).to(self.device)
        pred, _ = self.model(img)
        detections = non_max_suppression(pred, self.conf_thres, self.nms_thres)[0]
        
        if detections is not None and len(detections) > 0:
            # Rescale boxes from 416 to true image size
            # detections[:, :4] = scale_coords([self.img_size, self.img_size], detections[:, :4], im0.shape).round()
            detections[:, :4] = scale_coords(img.shape[2:], detections[:, :4], im0.shape).round()

        return detections

class CameraProcessNode:
    def __init__(self):
        params = parse_private_args(
            input_topic="/zzz/drivers/image_raw",
            output_topic="objects2d_detected",
            cfg_file="yolov3-spp.cfg",
            data_file="coco.data",
            weights_file="yolov3-spp.weights",
            names_file="coco.names"
        )

        # Initialize network
        self.yolo = YoloDetect(cfg=params.cfg_file, data_cfg=params.data_file,
            weights=params.weights_file, names=params.names_file)

        # Initialize ros topics
        rospy.Subscriber(params.input_topic, Image, self.callbackImg)
        self.pub = rospy.Publisher(params.output_topic, DetectionBox2DArray, queue_size=1)
        self.bridge = CvBridge()
        self.header = None
        rospy.loginfo("Yolo detector Standby!")

    def callbackImg(self, data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "rgb8")
        except CvBridgeError as e:
            rospy.logerror("Failed to convert image (%s)" % str(e))
        
        self.header = data.header
        self.inferenceImg(cv_image)

    def inferenceImg(self, img):
        array = np.ascontiguousarray(img[:, :, :3])

        start_time = time.time()
        detections = self.yolo.run(array)
        print('time for yolo 2d detection= %.2f' %(time.time() - start_time))

        msg_to_send = DetectionBox2DArray()
        msg_to_send.header = self.header
        if detections is not None and len(detections) > 0:
            for x1, y1, x2, y2, obj_conf, cls_conf, cls_id in detections:
                msg_single = DetectionBox2D()
                msg_single.projection_type = DetectionBox2D.PROJECTION_HEV
                msg_single.bbox.pose.x = (x1 + x2) / 2.
                msg_single.bbox.pose.y = (y1 + y2) / 2.
                msg_single.bbox.pose.covariance = np.diag([1/obj_conf]*3).flatten().tolist()
                msg_single.bbox.dimension.length_x = abs(x1 - x2)
                msg_single.bbox.dimension.length_y = abs(y1 - y2)
                msg_single.bbox.dimension.covariance = np.diag([1/obj_conf]*2).flatten().tolist()

                # msg_class = ObjectClass()
                # msg_class.comments = self.yolo.classes[int(cls_id)]
                # msg_class.classid = cls_id # TODO: Add conversion
                # msg_class.score = cls_conf
                id_in_rosmsg = conversion_class_id(self.yolo.classes, cls_id)

                if id_in_rosmsg is not None: 
                    msg_class = ObjectClass()
                    msg_class.comments = self.yolo.classes[int(cls_id)]
                    msg_class.classid = id_in_rosmsg
                    msg_class.score = cls_conf
                    msg_single.classes.append(msg_class)
                    msg_to_send.detections.append(msg_single)
                
            self.pub.publish(msg_to_send)

if __name__ == '__main__':
    rospy.init_node('yolo_detector')
    CameraProcessNode()
    rospy.spin()
