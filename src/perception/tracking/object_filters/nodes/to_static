#!/usr/bin/env python

import rospy
import os
import threading

from zzz_common.params import parse_private_args
from zzz_driver_msgs.msg import RigidBodyStateStamped
from zzz_perception_msgs.msg import DetectionBoxArray
from zzz_perception_tracking_object_filters.transformers import RigidToStaticTransformer

class FilterNode():
    def __init__(self):
        params = parse_private_args(
            input_topic="objects_detected",
            output_topic="objects_transformed",
            pose_topic="/zzz/navigation/ego_pose"
        )

        self._input_subscriber = rospy.Subscriber(params.pop("input_topic"), DetectionBoxArray, self.detection_callback)
        self._pose_subscriber = rospy.Subscriber(params.pop("pose_topic"), RigidBodyStateStamped, self.pose_callback)
        self._publisher = rospy.Publisher(params.pop("output_topic"), DetectionBoxArray, queue_size=1)
        self._filter = RigidToStaticTransformer(**params)

        self._pose_trigger = threading.Event()

    def pose_callback(self, msg):
        self._filter.receive_pose(msg)
        self._pose_trigger.set()

    def detection_callback(self, msg):
        self._pose_trigger.wait()
        self._publisher.publish(self._filter.filter(msg))

if __name__ == "__main__":
    rospy.init_node("rigid_to_static")
    node = FilterNode()
    rospy.spin()
