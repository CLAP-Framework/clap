#!/usr/bin/env python

import rospy
from zzz_common.params import parse_private_args
from zzz_cognition_msgs.msg import MapState
from zzz_planning_decision_lane_models.longitudinal import IDM
from zzz_planning_decision_lane_models.learning import RLSDecision
from zzz_planning_decision_lane_models import MainDecision
from zzz_planning_msgs.msg import DecisionTrajectory
from carla_msgs.msg import CarlaCollisionEvent # FIXME: This is Carla related

class RLSNode(object):
    def __init__(self):

        params = parse_private_args(
            decision_trajectory_topic="decision_trajectory",
            dynamic_map_topic="/zzz/cognition/local_dynamic_map/map_with_ref",
            collision_topic="/carla/ego_vehicle/collision"
        )

        self._dynamic_map_subscriber = rospy.Subscriber(params.dynamic_map_topic, MapState, self.dynamic_map_callback)
        self._decision_trajectory_publisher = rospy.Publisher(params.decision_trajectory_topic, DecisionTrajectory, queue_size=1)
        self._collision_subscriber = rospy.Subscriber(params.collision_topic, CarlaCollisionEvent, self.collision_callback)

        model_lon = IDM()
        model_lat = RLSDecision()
        self._decision_instance = MainDecision(lon_decision=model_lon, lat_decision=model_lat)
        self._last_decision_time = 0

    def dynamic_map_callback(self, msg, decision_dt = 0.75):
        # current_time = rospy.Time.now().to_sec()
        # if current_time - self._last_decision_time < decision_dt:
        #     return
        # self._last_decision_time = current_time

        rospy.logdebug("Current_time: %f",self._last_decision_time)
        publish_msg = self._decision_instance.generate_trajectory_with_speed(msg)
        rospy.logdebug("PUBLISH: trajectory length = %d, desired_speed = %f", 
            len(publish_msg.trajectory.poses), publish_msg.desired_speed)

        self._decision_trajectory_publisher.publish(publish_msg)
    
    def collision_callback(self, msg):
        # collision_id = msg.other_actor_id
        self._decision_instance.lateral_model_instance.collision_signal = True
        self._decision_instance.lateral_model_instance.collision_times += 1

if __name__ == "__main__":

    rospy.init_node("rls_node", log_level=rospy.DEBUG)
    node = RLSNode()
    rospy.spin()

