#!/usr/bin/env python


import rospy
from zzz_driver_msgs.msg import MapState
from zzz_planning_msgs.msg import DecisionTrajectory
from zzz_driver_msgs.msg import ObstacleDataArray
from zzz_planning_decision_safeguard import Safeguard

class SafeguardNode(object):
    def __init__(self,
        vehicle_list_topic="/carla/environment_perception/vehicle_list",
        pedestrian_list_topic="/carla/environment_perception/pedestrian_list",
        decision_trajectory_topic="carla/decision_trajectory",
        safeguard_trajectory_topic="carla/safeguard_trajectory",
        dynamic_map_topic="carla/dynamic_map"):
        pass

        self._vehicle_list_subscriber = rospy.Subscriber("/carla/environment_perception/vehicle_list", ObstacleDataArray, self.surrounding_vehicle_callback)
        self._pedestrian_list_subscriber = rospy.Subscriber("/carla/environment_perception/pedestrian_list", ObstacleDataArray, self.surrounding_pedestrian_callback)
        self._dynamic_map_subscriber = rospy.Subscriber(dynamic_map_topic,MapState,self.dynamic_map_callback)
        self._decision_trajectory_subscriber = rospy.Subscriber(decision_trajectory_topic, DecisionTrajectory, self.decision_trajectory_callback)
        self._safeguard_trajectory_subscriber = rospy.Publisher(safeguard_trajectory_topic, DecisionTrajectory, queue_size=1)
        self._safeguard_instance = Safeguard()


        self.enable_safeguard = True



    def surrounding_vehicle_callback(self,vehicle_list):
        self._safeguard_instance.update_vehicle_list(vehicle_list)
        rospy.logdebug("receive vehicle list: %d", len(vehicle_list.obstacles))

    def surrounding_pedestrian_callback(self,pedestrian_list):
        self._safeguard_instance.update_pedestrian_list(pedestrian_list)
        rospy.logdebug("receive pedestrian list: %d", len(pedestrian_list.obstacles))

    def dynamic_map_callback(self, dynamic_map):
        self._safeguard_instance.update_dynamic_map(dynamic_map)

    def decision_trajectory_callback(self,decision):

        if self.enable_safeguard:
            decision_msg = self._safeguard_instance.check_trajectory(decision)
            self._safeguard_trajectory_subscriber.publish(decision_msg)
        else:
            self._safeguard_trajectory_subscriber.publish(decision)

if __name__ == "__main__":

    rospy.init_node("safeguard_node", log_level=rospy.DEBUG)
    node = SafeguardNode()
    rospy.spin()
