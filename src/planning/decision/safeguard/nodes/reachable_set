#!/usr/bin/env python


import rospy

from zzz_common.params import parse_private_args
from zzz_cognition_msgs.msg import MapState
from zzz_planning_msgs.msg import DecisionTrajectory
from zzz_planning_decision_safeguard.reachable_set import ReachableSet

class SafeguardNode(object):
    def __init__(self):
        params = parse_private_args(
            decision_trajectory_topic="decision_trajectory", # input
            safeguard_trajectory_topic="safeguard_trajectory", # output
            dynamic_map_topic="/zzz/cognition/local_dynamic_map/map_with_ref"
        )
        self._dynamic_map_subscriber = rospy.Subscriber(params.dynamic_map_topic, MapState, self.dynamic_map_callback)
        self._decision_trajectory_subscriber = rospy.Subscriber(params.decision_trajectory_topic, DecisionTrajectory, self.decision_trajectory_callback)
        self._safeguard_trajectory_publisher = rospy.Publisher(params.safeguard_trajectory_topic, DecisionTrajectory, queue_size=1)
        self._safeguard_instance = ReachableSet()

    def dynamic_map_callback(self, dynamic_map):
        self._safeguard_instance.update_dynamic_map(dynamic_map)

    def decision_trajectory_callback(self, decision):
        decision_msg = self.check_trajectory(decision)
        self._safeguard_trajectory_publisher.publish(decision_msg)

    def check_trajectory(self, decision):
        safeguard_triggered, safespeed = self._safeguard_instance.check_trajectory(decision.trajectory, decision.desired_speed)

        if safeguard_triggered:
            rospy.loginfo("Safeguarded triggered")

        msg = decision
        msg.trajectory = decision.trajectory
        msg.desired_speed = safespeed

        return msg

if __name__ == "__main__":

    rospy.init_node("safeguard_node", log_level=rospy.DEBUG)
    node = SafeguardNode()
    rospy.spin()
