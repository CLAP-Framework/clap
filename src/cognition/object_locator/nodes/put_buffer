#!/usr/bin/env python

__module_name__ = "map_provider"

import os
import rospy
import threading
from zzz_common.params import parse_private_args

from zzz_driver_msgs.msg import RigidBodyStateStamped
from zzz_cognition_msgs.msg import MapState
from zzz_cognition_object_locator.path_buffer import PathBuffer
from nav_msgs.msg import Path

class Node(object):
    def __init__(self,):
        params = parse_private_args(
            map_file = "",
            map_input_topic = "local_dynamic_map/map_with_objects",
            map_output_topic = "local_dynamic_map/map_with_ref",
            map_file_type = "opendrive",
            pose_topic = "/zzz/navigation/ego_pose",
            reference_path_topic = "/zzz/navigation/reference_path"
        )

        self._map_trigger = threading.Event()
        self._reference_path_trigger = threading.Event()

        self._map_instance = PathBuffer()

        self._input_map_subscriber = rospy.Subscriber(params.map_input_topic, MapState, self.map_callback)
        self._pose_subscriber = rospy.Subscriber(params.pose_topic, RigidBodyStateStamped, self.pose_callback)
        self._reference_path_subscriber = rospy.Subscriber(params.reference_path_topic, Path, self.reference_callback)
        self._output_map_publisher = rospy.Publisher(params.map_output_topic, MapState, queue_size=1)

    def map_callback(self, msg):
        self._map_instance.receive_static_map(msg)
        self._map_trigger.set()

    def reference_callback(self, msg):
        self._map_trigger.wait()
        self._map_instance.receive_reference_path(msg)
        self._reference_path_trigger.set()
        rospy.loginfo("[%s] Received reference path" % __module_name__)

    def pose_callback(self, msg):
        # Note: Here we actually assume that pose is updating at highest frequency
        self._map_trigger.wait()
        self._reference_path_trigger.wait()

        new_static_map = self._map_instance.receive_ego_state(msg)
        rospy.logdebug("Path length: %d", len(new_static_map.jmap.reference_path.map_lane.central_path_points))
        self._output_map_publisher.publish(new_static_map)

if __name__ == "__main__":

    rospy.init_node("put_buffer", log_level=rospy.DEBUG)
    node = Node()
    rospy.spin()
