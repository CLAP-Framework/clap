#!/usr/bin/env python

import os
import rospy
import threading

from zzz_common.params import parse_private_args
from zzz_driver_msgs.msg import RigidBodyStateStamped
from zzz_navigation_msgs.msg import Map
from zzz_cognition_msgs.msg import MapState
from zzz_perception_msgs.msg import DetectionBoxArray, TrackingBoxArray
from zzz_cognition_object_locator.obstacle_locator import NearestLocator

from visualization_msgs.msg import Marker, MarkerArray


class LocatorNode(object):
    def __init__(self):

        params = parse_private_args(
            objects_topic = "/zzz/perception/objects_tracked",
            map_input_topic="/zzz/navigation/local_static_map",
            map_output_topic="local_dynamic_map/map_with_objects",
            pose_topic = "/zzz/navigation/ego_pose",
            traffic_light_topic = "/zzz/perception/traffic_lights",
            hz=20,
        )

        self._map_instance = NearestLocator()
        self._rate = rospy.Rate(params.hz)

        self._pose_subscriber = rospy.Subscriber(params.pose_topic, RigidBodyStateStamped, self._map_instance.receive_ego_state)
        self._surrounding_vehicle_subscriber = rospy.Subscriber(params.objects_topic, TrackingBoxArray, self._map_instance.receive_object_list)
        self._static_map_subscriber = rospy.Subscriber(params.map_input_topic, Map, self._map_instance.receive_static_map)
        self._dynamic_map_publisher = rospy.Publisher(params.map_output_topic, MapState, queue_size=1)
        self._traffic_light_subscriber = rospy.Subscriber(params.traffic_light_topic, DetectionBoxArray,
            self._map_instance.receive_traffic_light_detection)
        self._rviz_nearest_front_vehicle = rospy.Publisher('/zzz/cognition/nearest_front_vehicle', MarkerArray, queue_size=1)
        self._rviz_corner_to_lane = rospy.Publisher('/zzz/cognition/front_vehicle_corner_to_lane', MarkerArray, queue_size=1)

    def loop(self):
        while not rospy.is_shutdown():
            self._rate.sleep()
            dmap = self._map_instance.update()
            if dmap:
                rospy.loginfo(
                    " Cognition: Publish Dynamic Map: lanes_num = %d, in_junction = %s, ego_lane_index = %.2f, distance_to_end = %f",
                    len(dmap.mmap.lanes), str(dmap.model == MapState.MODEL_JUNCTION_MAP),
                    dmap.mmap.ego_lane_index, dmap.mmap.distance_to_junction)
                self._dynamic_map_publisher.publish(dmap)
                # TODO(lx): remove visulization part in every node to module visulization
                self._rviz_nearest_front_vehicle.publish(self._map_instance.nearest_front_vehicle_marker)
                self._rviz_corner_to_lane.publish(self._map_instance.corner_to_lane_marker)

if __name__ == "__main__":

    rospy.init_node("nearest_locator", log_level=rospy.DEBUG)
    node = LocatorNode()
    node.loop()
