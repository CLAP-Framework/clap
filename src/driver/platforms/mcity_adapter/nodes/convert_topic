#!/usr/bin/env python

import sys
import rospy
import tf.transformations as tft
import math

from zzz_common.params import parse_private_args
from zzz_control_msgs.msg import ControlCommand
from zzz_perception_msgs.msg import TrackingBoxArray, TrackingBox
from zzz_driver_msgs.msg import RigidBodyStateStamped
from zzz_driver_actuators_dataspeed_adapter.mkz import \
    to_mkz_throttle, to_mkz_brake, to_mkz_steering, to_mkz_gear, to_mkz_turn_signal
from mcity_msg.msg import BSM, BSMVec, Control, VehicleState

control_counter = 0

def convert_from_VehicleState(msg, pub):
    assert type(msg) == VehicleState

    new_msg = RigidBodyStateStamped()
    new_msg.header.stamp = rospy.Time.from_sec(msg.timestamp)
    new_msg.header.frame_id = "odom"
    new_msg.state.child_frame_id = "base_link"

    new_msg.state.pose.pose.position.x = msg.x
    new_msg.state.pose.pose.position.y = msg.y
    new_msg.state.pose.pose.position.z = msg.z
    new_msg.state.twist.twist.linear.x = msg.speed_x
    new_msg.state.twist.twist.linear.y = msg.speed_y
    new_msg.state.twist.twist.linear.z = msg.speed_z
    new_msg.state.accel.accel.linear.x = msg.acc_x
    new_msg.state.accel.accel.linear.y = msg.acc_y
    new_msg.state.accel.accel.linear.z = msg.acc_z

    # In MKZ, heading = 0 when x point towards north
    # print(msg.heading / 3.14159 * 180 % 360)
    q = tft.quaternion_from_euler(0, 0, msg.heading)
    new_msg.state.pose.pose.orientation.x = q[0]
    new_msg.state.pose.pose.orientation.y = q[1]
    new_msg.state.pose.pose.orientation.z = q[2]
    new_msg.state.pose.pose.orientation.w = q[3]
    new_msg.state.twist.twist.angular.z = msg.yaw_rate

    pub.publish(new_msg)

def convert_from_BSMVec(msg, pub):
    assert type(msg) == BSMVec
    
    new_msg = TrackingBoxArray()
    new_msg.header.stamp = rospy.Time.from_sec(msg.timestamp)
    for obj in msg.bsmVec:
        new_obj = TrackingBox()
        new_obj.uid = obj.id
        new_obj.bbox.dimension.length_x = obj.size_x
        new_obj.bbox.dimension.length_y = obj.size_y
        new_obj.bbox.dimension.length_z = obj.size_z

        new_obj.bbox.pose.pose.position.x = obj.x
        new_obj.bbox.pose.pose.position.y = obj.y
        new_obj.bbox.pose.pose.position.z = obj.z

        q = tft.quaternion_from_euler(0, 0, obj.heading)
        new_obj.bbox.pose.pose.orientation.x = q[0]
        new_obj.bbox.pose.pose.orientation.y = q[1]
        new_obj.bbox.pose.pose.orientation.z = q[2]
        new_obj.bbox.pose.pose.orientation.w = q[3]
        new_obj.twist.twist.x = obj.speed_x
        new_obj.twist.twist.y = obj.speed_y

        new_msg.targets.append(new_obj)
        
    pub.publish(new_msg)

def convert_to_BSMVec(msg, pub):
    assert type(msg) == TrackingBoxArray

    new_msg = BSMVec()
    new_msg.timestamp = msg.header.stamp.to_sec()
    for obj in msg.targets:
        new_obj = BSM()
        new_obj.id = obj.uid
        # TODO: Object type
        new_obj.size_x = obj.bbox.dimension.length_x
        new_obj.size_y = obj.bbox.dimension.length_y
        new_obj.size_z = obj.bbox.dimension.length_z

        new_obj.x = obj.bbox.pose.pose.position.x
        new_obj.y = obj.bbox.pose.pose.position.y
        new_obj.z = obj.bbox.pose.pose.position.z

        _, _, yaw = tft.euler_from_quaternion([
            obj.bbox.pose.pose.orientation.x,
            obj.bbox.pose.pose.orientation.y,
            obj.bbox.pose.pose.orientation.z,
            obj.bbox.pose.pose.orientation.w,
        ])
        new_obj.heading = yaw
        new_obj.speed_x = obj.twist.twist.linear.x
        new_obj.speed_y = obj.twist.twist.linear.y

        new_msg.bsmVec.append(new_obj)
        
    pub.publish(new_msg)

def convert_from_ControlCommand(msg, args):
    assert type(msg) == ControlCommand
    pub, map_cmd, map_act = args
    global control_counter

    new_msg = Control()
    new_msg.timestamp = msg.header.stamp.to_sec()
    new_msg.count = control_counter
    control_counter += 1

    cmd = to_mkz_throttle(msg, map_cmd['throttle'], map_act['throttle'])
    if cmd is not None:
        new_msg.throttle_cmd = cmd.pedal_cmd
    else:
        cmd = to_mkz_brake(msg, map_cmd['brake'], map_act['brake'])
        new_msg.brake_cmd = cmd.pedal_cmd

    new_msg.steering_cmd = to_mkz_steering(msg, map_cmd['steer'], map_act['steer']).steering_wheel_angle_cmd
    new_msg.gear_cmd = to_mkz_gear(msg).gear

    pub.publish(new_msg)

if __name__ == "__main__":
    rospy.init_node("convert_topic")

    params = parse_private_args(
        input_topic="",
        output_topic="",
        msg_type="",
        throttle_map_command=[0,1],
        throttle_map_actuator=[0,1],
        brake_map_command=[0,1],
        brake_map_actuator=[0,1],
        steer_map_command=[-1,1],
        steer_map_actuator=[-1,1],
    )

    map_cmd = dict(
        throttle=params.throttle_map_command,
        brake=params.brake_map_command,
        steer=params.steer_map_command
    )
    map_act = dict(
        throttle=params.throttle_map_actuator,
        brake=params.brake_map_actuator,
        steer=params.steer_map_actuator
    )

    if not (params.input_topic and params.output_topic and params.msg_type):
        rospy.logerr("Not enought parameters!")
        sys.exit(-1)

    if params.msg_type == "BSM":
        pub = rospy.Publisher(params.output_topic, TrackingBoxArray, queue_size=1, latch=True)
        rospy.Subscriber(params.input_topic, BSMVec, convert_from_BSMVec, pub)
    elif params.msg_type == "ControlCommand":
        pub = rospy.Publisher(params.output_topic, Control, queue_size=1, latch=True)
        rospy.Subscriber(params.input_topic, ControlCommand, convert_from_ControlCommand, (pub, map_cmd, map_act))
    elif params.msg_type == "VehicleState":
        pub = rospy.Publisher(params.output_topic, RigidBodyStateStamped, queue_size=1, latch=True)
        rospy.Subscriber(params.input_topic, VehicleState, convert_from_VehicleState, pub)
    elif params.msg_type == "TrackingBoxArray":
        pub = rospy.Publisher(params.output_topic, BSMVec, queue_size=1, latch=True)
        rospy.Subscriber(params.input_topic, TrackingBoxArray, convert_to_BSMVec, pub)
    else:
        rospy.logerr("Invalid input message type")
        sys.exit(-1)
    
    rospy.spin()
