#!/usr/bin/env python

import math
import random
import sys
import thread
import time

import numpy as np
import rospy
from nav_msgs.msg import Path

import carla
from carla import Location, Rotation, Transform, Vector3D
#from carla_waypoint_publisher import CarlaReferecePathGenerator
from carla_waypoint_publisher import CarlaToRosWaypointConverter
from zzz_driver_msgs.msg import RigidBodyStateStamped
from zzz_navigation_msgs.msg import Lane, LanePoint, Map, MapString
from geometry_msgs.msg import PoseWithCovarianceStamped, Pose
from carla_msgs.msg import CarlaCollisionEvent # FIXME: This is Carla related


RUNNING_TIME = 300
CX = -0.4771
CY = 0.1983

###########
# Event 4 Environment Setting
###########

def spawn_traffic_circle_agents(max_agents, world, blueprints, spawn_points, verbose=False):
    '''
    Continuously spawns agents around the traffic circle in Town03.

    Parameters
    ----------
    max_agents : int
        The maximum number of agents allowed in the scenario at any given time.
    actors : list
        A list of actors that have been spawned into the Carla world
    world : carla.World
        The Carla world in which to spawn actors.
    verbose : bool, optional
        Used to determine whether some information should be displayed.
    '''

    sp_indices = [
        8, 9, 47, 48, 55, 56, 57, 58, 145, 146, 153, 154, 164, 182, 183
        # 0, 7, 8, 112, 113, 114, 118, 120, 121, 122, 123, 146, 149, 210, 211,218,219, 229, 247, 248, 257
    ]

    actor_list = world.get_actors()
    vehicle_list = actor_list.filter("*vehicle*")
    num_agents = len(vehicle_list)

    if num_agents < max_agents:
        blueprint = random.choice(blueprints)
        blueprint.set_attribute('role_name', 'autopilot')

        spawn_point = spawn_points[random.choice(sp_indices)]
        min_d = 100
        for vehicle in vehicle_list:
            d = vehicle.get_location().distance(spawn_point.location)
            if d < min_d:
                min_d = d
        if min_d > 20:
            new_vehicle = world.try_spawn_actor(blueprint, spawn_point)
            if new_vehicle:
                if "vehicle" in new_vehicle.type_id:
                    new_vehicle.set_autopilot(True)


def remove_non_traffic_circle_agents(world, verbose=False):
    '''
    Monitors the Carla scene and actively removes the agents that have
    wondered too far away from the traffic circle in Town03.

    Parameters
    ----------
    actors : list
        A list of actors that have been spawned into the Carla world
    verbose : bool, optional
        Used to determine whether some information should be displayed.
    '''
    circle_center = carla.Location(-10, -43, 0) # map/circle center
    dist_range = 100.0 # 100 meters from traffic circle center
    actor_list = world.get_actors()
    vehicle_list = actor_list.filter("*vehicle*")

    for vehicle in vehicle_list:
        dist_from_origin = vehicle.get_location().distance(circle_center)
        
        if dist_from_origin > dist_range:
            vehicle.destroy()

##########
# Event 4 Map Setting
##########

# global pose_buffer
pose_buffer = None

def pose_callback(msg):
    global pose_buffer
    pose_buffer = msg


def generate_traffic(carla_world,if_random,delay = 0.05):
    
    # generate surrounding vehicles
    blueprints = carla_world.get_blueprint_library().filter('vehicle.*')
    
    blueprints = [x for x in blueprints if int(x.get_attribute('number_of_wheels')) == 4]
    blueprints = [x for x in blueprints if not x.id.endswith('isetta')]
    
    spawn_points = list(carla_world.get_map().get_spawn_points())

    # print('found %d spawn points.' % len(spawn_points))

    #if choose random spawn points
    if if_random == 1:

        #set_ramdom_vehicle_number
        max_agents = 30

        actor_list = carla_world.get_actors()
        vehicle_list = actor_list.filter("*vehicle*")
        num_agents = len(vehicle_list)
        i = 0
        if num_agents < max_agents:         
            for spawn_point in spawn_points:
                i = i + 1
                if i > max_agents - num_agents:
                    break
                blueprint = random.choice(blueprints)
                if -75 < spawn_point.location.x < 55 and -72 < spawn_point.location.y < 17:
                    min_d = 100
                    for vehicle in vehicle_list:
                        d = vehicle.get_location().distance(spawn_point.location)
                        if d < min_d:
                            min_d = d
                    if min_d > 20:
                        new_vehicle = carla_world.try_spawn_actor(blueprint, spawn_point)
                        if new_vehicle:
                            if "vehicle" in new_vehicle.type_id:
                                new_vehicle.set_autopilot(True)
                                # new_vehicle.apply_control(carla.VehicleControl(throttle=0.5, steer=0.0))


    #fix spawn points
    else:      
        spawn_points = []

        #spawn one vehicle
        
        for num in range(10,60):
            if num%10 == 0:
                spawn_point = carla_world.get_map().get_spawn_points()[0]
                spawn_point.location.x = num
                spawn_point.location.y = -207
                spawn_point.location.z = 2
                spawn_point.rotation.pitch = 0
                spawn_point.rotation.yaw = 180 
                spawn_point.rotation.roll = 0
                spawn_points.append(spawn_point)

        for num in range(20,70):
            if num%10 == 0:
                spawn_point = carla_world.get_map().get_spawn_points()[0]
                spawn_point.location.x = num
                spawn_point.location.y = -137
                spawn_point.location.z = 6
                spawn_point.rotation.pitch = 0
                spawn_point.rotation.yaw = 180 
                spawn_point.rotation.roll = 0
                spawn_points.append(spawn_point)


        for num in range(140,190):
            if num%10 == 0:
                spawn_point = carla_world.get_map().get_spawn_points()[0]
                spawn_point.location.x = -1.5
                spawn_point.location.y = num
                spawn_point.location.z = 2
                spawn_point.rotation.pitch = 0
                spawn_point.rotation.yaw = 270 
                spawn_point.rotation.roll = 0
                spawn_points.append(spawn_point)

        for num in range(0,120):
            if num%10 == 0:
                spawn_point = carla_world.get_map().get_spawn_points()[0]
                spawn_point.location.x = -75
                spawn_point.location.y = -num
                spawn_point.location.z = 2
                spawn_point.rotation.pitch = 0
                spawn_point.rotation.yaw = 270 
                spawn_point.rotation.roll = 0
                spawn_points.append(spawn_point)

        for spawn_point in spawn_points:
            blueprint = random.choice(blueprints)
            if blueprint.has_attribute('color'):
                color = random.choice(blueprint.get_attribute('color').recommended_values)
                blueprint.set_attribute('color', color)
            blueprint.set_attribute('role_name', 'autopilot')
            vehicle = carla_world.try_spawn_actor(blueprint, spawn_point)
            if vehicle is not None:
                actor_list.append(vehicle)
                # vehicle.set_autopilot()                                                 #autopilot
                vehicle.apply_control(carla.VehicleControl(throttle=0.5, steer=0.0))      #given control command
                print('fixed spawned %r at %s' % (vehicle.type_id, spawn_point.location))

def generate_pedestrians(carla_world,carla_client,if_random,delay = 0.05):
    # generate pedestrians
    blueprintsWalkers = carla_world.get_blueprint_library().filter("walker.*")
    spawn_points = []

    for num in range(10,140):
        if num%15 == 0:
            spawn_point = carla_world.get_map().get_spawn_points()[0]
            spawn_point.location.x = -13
            spawn_point.location.y = num
            spawn_point.location.z = 0
            spawn_point.rotation.pitch = 0
            spawn_point.rotation.yaw = 90 
            spawn_point.rotation.roll = 0
            spawn_points.append(spawn_point)

    for spawn_point in spawn_points:
        player = carla_world.try_spawn_actor(random.choice(blueprintsWalkers),spawn_point)
        player_control = carla.WalkerControl()
        player_control.speed = 2
        pedestrian_heading = 90
        player_rotation = carla.Rotation(0,pedestrian_heading,0)
        player_control.direction = player_rotation.get_forward_vector()
        # player_control.direction.x = 1
        # player_control.direction.y = 0
        # player_control.direction.z = 0
        if player is not None:
            player.apply_control(player_control)   

    spawn_points = []

    for num in range(-10,50):
        if num%10 == 0:
            spawn_point = carla_world.get_map().get_spawn_points()[0]
            spawn_point.location.x = num
            spawn_point.location.y = 128
            spawn_point.location.z = 0
            spawn_point.rotation.pitch = 0
            spawn_point.rotation.yaw = 180 
            spawn_point.rotation.roll = 0
            spawn_points.append(spawn_point)
    for spawn_point in spawn_points:
        player = carla_world.try_spawn_actor(random.choice(blueprintsWalkers),spawn_point)
        player_control = carla.WalkerControl()
        player_control.speed = 3
        pedestrian_heading = 180
        player_rotation = carla.Rotation(0,pedestrian_heading,0)
        player_control.direction = player_rotation.get_forward_vector()
        # player_control.direction.x = 1
        # player_control.direction.y = 0
        # player_control.direction.z = 0
        if player is not None:
            player.apply_control(player_control)  

def try_spawn_random_vehicle_at(transform,blueprints,carla_world):
        blueprint = random.choice(blueprints)
        if blueprint.has_attribute('color'):
            color = random.choice(blueprint.get_attribute('color').recommended_values)
            blueprint.set_attribute('color', color)
        blueprint.set_attribute('role_name', 'autopilot')
        vehicle = carla_world.try_spawn_actor(blueprint, transform)
        if vehicle is not None:
            actor_list.append(vehicle)
            vehicle.set_autopilot()
            print('random spawned %r at %s' % (vehicle.type_id, transform.location))
            return True
        return False

def change_the_world(carla_world):
    weather = carla_world.get_weather()
    weather.cloudyness = 0
    weather.precipitation = 0
    weather.precipitation_deposits = 0
    weather.wind_intensity = 0
    weather.sun_azimuth_angle = 90
    weather.sun_altitude_angle = 90
    
    carla_world.set_weather(weather)

def change_traffic_lights(carla_world):
    traffic_lights = carla_world.get_actors().filter('*traffic_light*')
    for tl in traffic_lights:
        tl.set_state(carla.TrafficLightState.Green)
        tl.freeze(1)
        # tl.set_green_time(9.0)
        # tl.set_yellow_time(0.01)
        # tl.set_red_time(0.01)

def collision_callback(msg):
    global collision_signal
    collision_signal = True

def restart_ego_vehicle(carla_world):
    start_transform = Transform()
    start_transform.location.x = -10
    start_transform.location.y = -94
    start_transform.location.z = 0
    start_transform.rotation.pitch = 0
    start_transform.rotation.yaw = 180
    start_transform.rotation.roll = 0
    actor_list = carla_world.get_actors()

    vehicle_list = actor_list.filter("vehicle.*")
    for vehicle in vehicle_list:
        Location = vehicle.get_location()
        if -20.0 < Location.x < 0.0 and 75.0 < Location.y < 105.0:
            vehicle.destroy()
        if vehicle.attributes['role_name'] == "ego_vehicle":
            vehicle.set_transform(start_transform)
    
    setgoal = carla_world.get_map().get_spawn_points()[0]
    setgoal.location.x = -50.8
    setgoal.location.y = -38.8
    setgoal.location.z = 0
    setgoal.rotation.pitch = 0
    setgoal.rotation.yaw = 0 
    setgoal.rotation.roll = 0
    ReferencePathGenerator = CarlaToRosWaypointConverter(carla_world,setgoal)

    global collision_signal
    collision_signal = False
    global if_write
    if_write = False


def record_collsion_to_txt(carla_world, collision_signal, pose_buffer):
    # if in intersection
    global if_write

    if_intersection = False
    if pose_buffer is not None:
        ego_x = pose_buffer.state.pose.pose.position.x
        ego_y = pose_buffer.state.pose.pose.position.y
        if -75.0 < ego_x < -25.0 or 5.0 < ego_x < 55:
            if -25.0 < ego_y < 25.0 or 65.0 < ego_y < 115.0:
                if_intersection = True
                # print("++++++++++++++++++++++++++ in intersection")
                
        else:
            if_intersection = False
            if_write = False

    if if_intersection == True and if_write == False:
        fw = open("/home/carla/ZZZ/zzz/src/driver/simulators/carla/carla_adapter/nodes/record_collision.txt", 'a')   
        fw.write("into_intersection")   
        fw.write("\n")
        fw.close()
        if_write = True


    if if_intersection == True:    
        if collision_signal:
            fw = open("/home/carla/ZZZ/zzz/src/driver/simulators/carla/carla_adapter/nodes/record_collision.txt", 'a')   
            fw.write("collision")
            fw.write("\n")
            fw.close()   
            print("++++++++++++++++++++++++++ write something")

def remove_stop_traffic(carla_world):
    actor_list = carla_world.get_actors()
    vehicle_list = actor_list.filter("*vehicle*")

    for vehicle in vehicle_list:
        if vehicle.attributes['role_name'] == "ego_vehicle":
            pass
        else:
            velocity = vehicle.get_velocity()
            if velocity.x < 0.02 and velocity.y < 0.02:
                vehicle.destroy()

def random_acclerate(carla_world):
    actor_list = carla_world.get_actors()
    vehicle_list = actor_list.filter("*vehicle*")

    for vehicle in vehicle_list:
        if vehicle.attributes['role_name'] == "ego_vehicle":
            pass
        else:
            # Random_speed = vehicle.get_velocity()
            # Random_speed.x = Random_speed.x * 2
            # Random_speed.y = Random_speed.y * 2
            # if Random_speed.x > 2:
            #     Random_speed.x = 2
            # if Random_speed.y > 2:
            #     Random_speed.y = 2
            
            # vehicle.set_velocity(Random_speed)
            Random_speed = Vector3D()
            Random_speed.x = 10
            Random_speed.y = 10
            vehicle.add_impulse(Random_speed)
            

global stay
stay = 0


def stay_too_long(carla_world):
    global stay
    actor_list = carla_world.get_actors()
    vehicle_list = actor_list.filter("vehicle.*")
    for vehicle in vehicle_list:
        if vehicle.attributes['role_name'] == "ego_vehicle":
            v = vehicle.get_velocity()
            if abs(v.x) < 0.1 and abs(v.y) < 0.1:
                stay = stay + 1
            else:
                stay = 0

    if stay > 200:
        return True

    return False



if __name__ == "__main__":
    rospy.init_node("intersection_env")

    host = rospy.get_param("/carla/host", "127.0.0.1")
    port = rospy.get_param("/carla/port", 2000)
    carla_client = carla.Client(host=host, port=port)
    carla_client.set_timeout(2)
    carla_world = carla_client.get_world()
    rospy.loginfo("Connected to Carla.")
    actor_list = []
    set_goal_flag = 0
    has_set = 0 

    # Publish and Subscribe messages
    starting_time = rospy.Time.now().to_sec()
    _local_map_publisher = rospy.Publisher("/zzz/navigation/local_static_map", Map, queue_size=1)
    _reference_path_publisher = rospy.Publisher("/carla/ego_vehicle/waypoints", Path, queue_size=1, latch=True)
    _pose_subscriber = rospy.Subscriber("/zzz/navigation/ego_pose", RigidBodyStateStamped, pose_callback)
    _collision_subscriber = rospy.Subscriber("/carla/ego_vehicle/collision", CarlaCollisionEvent, collision_callback)

    # Change enviornment
    change_the_world(carla_world)

    # Generate Reference Path
    setgoal = carla_world.get_map().get_spawn_points()[0]
    setgoal.location.x = -50.8
    setgoal.location.y = -38.8
    setgoal.location.z = 0
    setgoal.rotation.pitch = 0
    setgoal.rotation.yaw = 0 
    setgoal.rotation.roll = 0
    ReferencePathGenerator = CarlaToRosWaypointConverter(carla_world,setgoal)

    
    global published_exit_path
    published_exit_path = False
    global collision_signal
    collision_signal = False

    rate = rospy.Rate(20)
    while not rospy.is_shutdown():
        # Generate surrounding vehicles
        generate_traffic(carla_world , 1)  #0 for fix point, 1 for random

        # Generate pedestrians
        # generate_pedestrians(carla_world,carla_client,0)

        # Remove traffic too far
        remove_non_traffic_circle_agents(carla_world)

        # Record collision
        record_collsion_to_txt(carla_world , collision_signal , pose_buffer)

        # Restart ego vehicle
        if collision_signal:
            restart_ego_vehicle(carla_world)
        if stay_too_long(carla_world):
            remove_stop_traffic(carla_world)
            restart_ego_vehicle(carla_world)

        # Change traffic lights
        change_traffic_lights(carla_world)

        # Keep Generating Reference Path
        if pose_buffer is not None:
            ego_x = pose_buffer.state.pose.pose.position.x
            ego_y = pose_buffer.state.pose.pose.position.y
            ego_z = pose_buffer.state.pose.pose.position.z

            if math.pow((ego_x+7),2) + math.pow((ego_y+3),2) < 64:
                setgoal_flag = 1

                if setgoal_flag == 1 and has_set == 0:
                    setgoal = carla_world.get_map().get_spawn_points()[0]
                    setgoal.location.x = -50.8
                    setgoal.location.y = -38.8
                    setgoal.location.z = 0
                    setgoal.rotation.pitch = 0
                    setgoal.rotation.yaw = 0 
                    setgoal.rotation.roll = 0
                    ReferencePathGenerator = CarlaToRosWaypointConverter(carla_world,setgoal)
                    remove_stop_traffic(carla_world)
                    has_set = 1

            elif math.pow((ego_x+10),2) + math.pow((ego_y-90),2) < 64:
                setgoal_flag = 1
                
                if setgoal_flag == 1 and has_set == 0:
                    setgoal = carla_world.get_map().get_spawn_points()[0]
                    setgoal.location.x = 33
                    setgoal.location.y = -39
                    setgoal.location.z = 0
                    setgoal.rotation.pitch = 0
                    setgoal.rotation.yaw = 0 
                    setgoal.rotation.roll = 0
                    ReferencePathGenerator = CarlaToRosWaypointConverter(carla_world,setgoal)
                    remove_stop_traffic(carla_world)
                    has_set = 1

            else:
                has_set = 0
                set_goal_flag = 0

        rate.sleep()


    del ReferencePathGenerator
    del carla_world
    del carla_client
