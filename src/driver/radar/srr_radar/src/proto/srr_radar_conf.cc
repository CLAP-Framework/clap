// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srr_radar_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
//#include "srr_radar_conf.pb.h"
#include "srr_radar/proto/srr_radar_conf.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace drivers {
namespace srr_radar {

namespace {

const ::google::protobuf::Descriptor* RadarConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrrRadarConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrrRadarConf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutputType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_srr_5fradar_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_srr_5fradar_5fconf_2eproto() {
  protobuf_AddDesc_srr_5fradar_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "srr_radar_conf.proto");
  GOOGLE_CHECK(file != NULL);
  RadarConf_descriptor_ = file->message_type(0);
  static const int RadarConf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sensor_id_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, output_type_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, output_type_),
  };
  RadarConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarConf_descriptor_,
      RadarConf::default_instance_,
      RadarConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, _internal_metadata_),
      -1);
  SrrRadarConf_descriptor_ = file->message_type(1);
  static const int SrrRadarConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrrRadarConf, radar_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrrRadarConf, radar_channel_),
  };
  SrrRadarConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SrrRadarConf_descriptor_,
      SrrRadarConf::default_instance_,
      SrrRadarConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrrRadarConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(SrrRadarConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrrRadarConf, _internal_metadata_),
      -1);
  OutputType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_srr_5fradar_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarConf_descriptor_, &RadarConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SrrRadarConf_descriptor_, &SrrRadarConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_srr_5fradar_5fconf_2eproto() {
  delete RadarConf::default_instance_;
  delete RadarConf_reflection_;
  delete SrrRadarConf::default_instance_;
  delete SrrRadarConf_reflection_;
}

void protobuf_AddDesc_srr_5fradar_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_srr_5fradar_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024srr_radar_conf.proto\022\021drivers.srr_rada"
    "r\"\254\001\n\tRadarConf\022\036\n\017sensor_id_valid\030\001 \001(\010"
    ":\005false\022\037\n\021output_type_valid\030\002 \001(\010:\004true"
    "\022\024\n\tsensor_id\030\003 \001(\r:\0010\022H\n\013output_type\030\004 "
    "\001(\0162\035.drivers.srr_radar.OutputType:\024OUTP"
    "UT_TYPE_CLUSTERS\"W\n\014SrrRadarConf\0220\n\nrada"
    "r_conf\030\001 \001(\0132\034.drivers.srr_radar.RadarCo"
    "nf\022\025\n\rradar_channel\030\002 \001(\t*U\n\nOutputType\022"
    "\026\n\022OUTPUT_TYPE_TRACKS\020\000\022\030\n\024OUTPUT_TYPE_C"
    "LUSTERS\020\001\022\025\n\021OUTPUT_TYPE_ERROR\020\002", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "srr_radar_conf.proto", &protobuf_RegisterTypes);
  RadarConf::default_instance_ = new RadarConf();
  SrrRadarConf::default_instance_ = new SrrRadarConf();
  RadarConf::default_instance_->InitAsDefaultInstance();
  SrrRadarConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_srr_5fradar_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_srr_5fradar_5fconf_2eproto {
  StaticDescriptorInitializer_srr_5fradar_5fconf_2eproto() {
    protobuf_AddDesc_srr_5fradar_5fconf_2eproto();
  }
} static_descriptor_initializer_srr_5fradar_5fconf_2eproto_;
const ::google::protobuf::EnumDescriptor* OutputType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputType_descriptor_;
}
bool OutputType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarConf::kSensorIdValidFieldNumber;
const int RadarConf::kOutputTypeValidFieldNumber;
const int RadarConf::kSensorIdFieldNumber;
const int RadarConf::kOutputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarConf::RadarConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:drivers.srr_radar.RadarConf)
}

void RadarConf::InitAsDefaultInstance() {
}

RadarConf::RadarConf(const RadarConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:drivers.srr_radar.RadarConf)
}

void RadarConf::SharedCtor() {
  _cached_size_ = 0;
  sensor_id_valid_ = false;
  output_type_valid_ = true;
  sensor_id_ = 0u;
  output_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarConf::~RadarConf() {
  // @@protoc_insertion_point(destructor:drivers.srr_radar.RadarConf)
  SharedDtor();
}

void RadarConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarConf_descriptor_;
}

const RadarConf& RadarConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_srr_5fradar_5fconf_2eproto();
  return *default_instance_;
}

RadarConf* RadarConf::default_instance_ = NULL;

RadarConf* RadarConf::New(::google::protobuf::Arena* arena) const {
  RadarConf* n = new RadarConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:drivers.srr_radar.RadarConf)
  if (_has_bits_[0 / 32] & 15u) {
    sensor_id_valid_ = false;
    output_type_valid_ = true;
    sensor_id_ = 0u;
    output_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:drivers.srr_radar.RadarConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool sensor_id_valid = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_id_valid_)));
          set_has_sensor_id_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_type_valid;
        break;
      }

      // optional bool output_type_valid = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_output_type_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_type_valid_)));
          set_has_output_type_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sensor_id;
        break;
      }

      // optional uint32 sensor_id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sensor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
          set_has_sensor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_output_type;
        break;
      }

      // optional .drivers.srr_radar.OutputType output_type = 4 [default = OUTPUT_TYPE_CLUSTERS];
      case 4: {
        if (tag == 32) {
         parse_output_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::drivers::srr_radar::OutputType_IsValid(value)) {
            set_output_type(static_cast< ::drivers::srr_radar::OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:drivers.srr_radar.RadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:drivers.srr_radar.RadarConf)
  return false;
#undef DO_
}

void RadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:drivers.srr_radar.RadarConf)
  // optional bool sensor_id_valid = 1 [default = false];
  if (has_sensor_id_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sensor_id_valid(), output);
  }

  // optional bool output_type_valid = 2 [default = true];
  if (has_output_type_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->output_type_valid(), output);
  }

  // optional uint32 sensor_id = 3 [default = 0];
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_id(), output);
  }

  // optional .drivers.srr_radar.OutputType output_type = 4 [default = OUTPUT_TYPE_CLUSTERS];
  if (has_output_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->output_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:drivers.srr_radar.RadarConf)
}

::google::protobuf::uint8* RadarConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:drivers.srr_radar.RadarConf)
  // optional bool sensor_id_valid = 1 [default = false];
  if (has_sensor_id_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sensor_id_valid(), target);
  }

  // optional bool output_type_valid = 2 [default = true];
  if (has_output_type_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->output_type_valid(), target);
  }

  // optional uint32 sensor_id = 3 [default = 0];
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_id(), target);
  }

  // optional .drivers.srr_radar.OutputType output_type = 4 [default = OUTPUT_TYPE_CLUSTERS];
  if (has_output_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->output_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drivers.srr_radar.RadarConf)
  return target;
}

int RadarConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:drivers.srr_radar.RadarConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool sensor_id_valid = 1 [default = false];
    if (has_sensor_id_valid()) {
      total_size += 1 + 1;
    }

    // optional bool output_type_valid = 2 [default = true];
    if (has_output_type_valid()) {
      total_size += 1 + 1;
    }

    // optional uint32 sensor_id = 3 [default = 0];
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_id());
    }

    // optional .drivers.srr_radar.OutputType output_type = 4 [default = OUTPUT_TYPE_CLUSTERS];
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drivers.srr_radar.RadarConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drivers.srr_radar.RadarConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drivers.srr_radar.RadarConf)
    MergeFrom(*source);
  }
}

void RadarConf::MergeFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drivers.srr_radar.RadarConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id_valid()) {
      set_sensor_id_valid(from.sensor_id_valid());
    }
    if (from.has_output_type_valid()) {
      set_output_type_valid(from.output_type_valid());
    }
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
    if (from.has_output_type()) {
      set_output_type(from.output_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drivers.srr_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarConf::CopyFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drivers.srr_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarConf::IsInitialized() const {

  return true;
}

void RadarConf::Swap(RadarConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarConf::InternalSwap(RadarConf* other) {
  std::swap(sensor_id_valid_, other->sensor_id_valid_);
  std::swap(output_type_valid_, other->output_type_valid_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(output_type_, other->output_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarConf_descriptor_;
  metadata.reflection = RadarConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarConf

// optional bool sensor_id_valid = 1 [default = false];
bool RadarConf::has_sensor_id_valid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarConf::set_has_sensor_id_valid() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarConf::clear_has_sensor_id_valid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarConf::clear_sensor_id_valid() {
  sensor_id_valid_ = false;
  clear_has_sensor_id_valid();
}
 bool RadarConf::sensor_id_valid() const {
  // @@protoc_insertion_point(field_get:drivers.srr_radar.RadarConf.sensor_id_valid)
  return sensor_id_valid_;
}
 void RadarConf::set_sensor_id_valid(bool value) {
  set_has_sensor_id_valid();
  sensor_id_valid_ = value;
  // @@protoc_insertion_point(field_set:drivers.srr_radar.RadarConf.sensor_id_valid)
}

// optional bool output_type_valid = 2 [default = true];
bool RadarConf::has_output_type_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarConf::set_has_output_type_valid() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarConf::clear_has_output_type_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarConf::clear_output_type_valid() {
  output_type_valid_ = true;
  clear_has_output_type_valid();
}
 bool RadarConf::output_type_valid() const {
  // @@protoc_insertion_point(field_get:drivers.srr_radar.RadarConf.output_type_valid)
  return output_type_valid_;
}
 void RadarConf::set_output_type_valid(bool value) {
  set_has_output_type_valid();
  output_type_valid_ = value;
  // @@protoc_insertion_point(field_set:drivers.srr_radar.RadarConf.output_type_valid)
}

// optional uint32 sensor_id = 3 [default = 0];
bool RadarConf::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarConf::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarConf::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarConf::clear_sensor_id() {
  sensor_id_ = 0u;
  clear_has_sensor_id();
}
 ::google::protobuf::uint32 RadarConf::sensor_id() const {
  // @@protoc_insertion_point(field_get:drivers.srr_radar.RadarConf.sensor_id)
  return sensor_id_;
}
 void RadarConf::set_sensor_id(::google::protobuf::uint32 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:drivers.srr_radar.RadarConf.sensor_id)
}

// optional .drivers.srr_radar.OutputType output_type = 4 [default = OUTPUT_TYPE_CLUSTERS];
bool RadarConf::has_output_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarConf::set_has_output_type() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarConf::clear_has_output_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarConf::clear_output_type() {
  output_type_ = 1;
  clear_has_output_type();
}
 ::drivers::srr_radar::OutputType RadarConf::output_type() const {
  // @@protoc_insertion_point(field_get:drivers.srr_radar.RadarConf.output_type)
  return static_cast< ::drivers::srr_radar::OutputType >(output_type_);
}
 void RadarConf::set_output_type(::drivers::srr_radar::OutputType value) {
  assert(::drivers::srr_radar::OutputType_IsValid(value));
  set_has_output_type();
  output_type_ = value;
  // @@protoc_insertion_point(field_set:drivers.srr_radar.RadarConf.output_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrrRadarConf::kRadarConfFieldNumber;
const int SrrRadarConf::kRadarChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrrRadarConf::SrrRadarConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:drivers.srr_radar.SrrRadarConf)
}

void SrrRadarConf::InitAsDefaultInstance() {
  radar_conf_ = const_cast< ::drivers::srr_radar::RadarConf*>(&::drivers::srr_radar::RadarConf::default_instance());
}

SrrRadarConf::SrrRadarConf(const SrrRadarConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:drivers.srr_radar.SrrRadarConf)
}

void SrrRadarConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radar_conf_ = NULL;
  radar_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrrRadarConf::~SrrRadarConf() {
  // @@protoc_insertion_point(destructor:drivers.srr_radar.SrrRadarConf)
  SharedDtor();
}

void SrrRadarConf::SharedDtor() {
  radar_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete radar_conf_;
  }
}

void SrrRadarConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrrRadarConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrrRadarConf_descriptor_;
}

const SrrRadarConf& SrrRadarConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_srr_5fradar_5fconf_2eproto();
  return *default_instance_;
}

SrrRadarConf* SrrRadarConf::default_instance_ = NULL;

SrrRadarConf* SrrRadarConf::New(::google::protobuf::Arena* arena) const {
  SrrRadarConf* n = new SrrRadarConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrrRadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:drivers.srr_radar.SrrRadarConf)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_radar_conf()) {
      if (radar_conf_ != NULL) radar_conf_->::drivers::srr_radar::RadarConf::Clear();
    }
    if (has_radar_channel()) {
      radar_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SrrRadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:drivers.srr_radar.SrrRadarConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .drivers.srr_radar.RadarConf radar_conf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radar_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radar_channel;
        break;
      }

      // optional string radar_channel = 2;
      case 2: {
        if (tag == 18) {
         parse_radar_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radar_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radar_channel().data(), this->radar_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "drivers.srr_radar.SrrRadarConf.radar_channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:drivers.srr_radar.SrrRadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:drivers.srr_radar.SrrRadarConf)
  return false;
#undef DO_
}

void SrrRadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:drivers.srr_radar.SrrRadarConf)
  // optional .drivers.srr_radar.RadarConf radar_conf = 1;
  if (has_radar_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->radar_conf_, output);
  }

  // optional string radar_channel = 2;
  if (has_radar_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_channel().data(), this->radar_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "drivers.srr_radar.SrrRadarConf.radar_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radar_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:drivers.srr_radar.SrrRadarConf)
}

::google::protobuf::uint8* SrrRadarConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:drivers.srr_radar.SrrRadarConf)
  // optional .drivers.srr_radar.RadarConf radar_conf = 1;
  if (has_radar_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->radar_conf_, false, target);
  }

  // optional string radar_channel = 2;
  if (has_radar_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_channel().data(), this->radar_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "drivers.srr_radar.SrrRadarConf.radar_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radar_channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drivers.srr_radar.SrrRadarConf)
  return target;
}

int SrrRadarConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:drivers.srr_radar.SrrRadarConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .drivers.srr_radar.RadarConf radar_conf = 1;
    if (has_radar_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->radar_conf_);
    }

    // optional string radar_channel = 2;
    if (has_radar_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radar_channel());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrrRadarConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:drivers.srr_radar.SrrRadarConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SrrRadarConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SrrRadarConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:drivers.srr_radar.SrrRadarConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:drivers.srr_radar.SrrRadarConf)
    MergeFrom(*source);
  }
}

void SrrRadarConf::MergeFrom(const SrrRadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drivers.srr_radar.SrrRadarConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radar_conf()) {
      mutable_radar_conf()->::drivers::srr_radar::RadarConf::MergeFrom(from.radar_conf());
    }
    if (from.has_radar_channel()) {
      set_has_radar_channel();
      radar_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radar_channel_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SrrRadarConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:drivers.srr_radar.SrrRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrrRadarConf::CopyFrom(const SrrRadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drivers.srr_radar.SrrRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrrRadarConf::IsInitialized() const {

  return true;
}

void SrrRadarConf::Swap(SrrRadarConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrrRadarConf::InternalSwap(SrrRadarConf* other) {
  std::swap(radar_conf_, other->radar_conf_);
  radar_channel_.Swap(&other->radar_channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SrrRadarConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrrRadarConf_descriptor_;
  metadata.reflection = SrrRadarConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrrRadarConf

// optional .drivers.srr_radar.RadarConf radar_conf = 1;
bool SrrRadarConf::has_radar_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SrrRadarConf::set_has_radar_conf() {
  _has_bits_[0] |= 0x00000001u;
}
void SrrRadarConf::clear_has_radar_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
void SrrRadarConf::clear_radar_conf() {
  if (radar_conf_ != NULL) radar_conf_->::drivers::srr_radar::RadarConf::Clear();
  clear_has_radar_conf();
}
const ::drivers::srr_radar::RadarConf& SrrRadarConf::radar_conf() const {
  // @@protoc_insertion_point(field_get:drivers.srr_radar.SrrRadarConf.radar_conf)
  return radar_conf_ != NULL ? *radar_conf_ : *default_instance_->radar_conf_;
}
::drivers::srr_radar::RadarConf* SrrRadarConf::mutable_radar_conf() {
  set_has_radar_conf();
  if (radar_conf_ == NULL) {
    radar_conf_ = new ::drivers::srr_radar::RadarConf;
  }
  // @@protoc_insertion_point(field_mutable:drivers.srr_radar.SrrRadarConf.radar_conf)
  return radar_conf_;
}
::drivers::srr_radar::RadarConf* SrrRadarConf::release_radar_conf() {
  // @@protoc_insertion_point(field_release:drivers.srr_radar.SrrRadarConf.radar_conf)
  clear_has_radar_conf();
  ::drivers::srr_radar::RadarConf* temp = radar_conf_;
  radar_conf_ = NULL;
  return temp;
}
void SrrRadarConf::set_allocated_radar_conf(::drivers::srr_radar::RadarConf* radar_conf) {
  delete radar_conf_;
  radar_conf_ = radar_conf;
  if (radar_conf) {
    set_has_radar_conf();
  } else {
    clear_has_radar_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:drivers.srr_radar.SrrRadarConf.radar_conf)
}

// optional string radar_channel = 2;
bool SrrRadarConf::has_radar_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SrrRadarConf::set_has_radar_channel() {
  _has_bits_[0] |= 0x00000002u;
}
void SrrRadarConf::clear_has_radar_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
void SrrRadarConf::clear_radar_channel() {
  radar_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radar_channel();
}
 const ::std::string& SrrRadarConf::radar_channel() const {
  // @@protoc_insertion_point(field_get:drivers.srr_radar.SrrRadarConf.radar_channel)
  return radar_channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrrRadarConf::set_radar_channel(const ::std::string& value) {
  set_has_radar_channel();
  radar_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drivers.srr_radar.SrrRadarConf.radar_channel)
}
 void SrrRadarConf::set_radar_channel(const char* value) {
  set_has_radar_channel();
  radar_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drivers.srr_radar.SrrRadarConf.radar_channel)
}
 void SrrRadarConf::set_radar_channel(const char* value, size_t size) {
  set_has_radar_channel();
  radar_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drivers.srr_radar.SrrRadarConf.radar_channel)
}
 ::std::string* SrrRadarConf::mutable_radar_channel() {
  set_has_radar_channel();
  // @@protoc_insertion_point(field_mutable:drivers.srr_radar.SrrRadarConf.radar_channel)
  return radar_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrrRadarConf::release_radar_channel() {
  // @@protoc_insertion_point(field_release:drivers.srr_radar.SrrRadarConf.radar_channel)
  clear_has_radar_channel();
  return radar_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrrRadarConf::set_allocated_radar_channel(::std::string* radar_channel) {
  if (radar_channel != NULL) {
    set_has_radar_channel();
  } else {
    clear_has_radar_channel();
  }
  radar_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radar_channel);
  // @@protoc_insertion_point(field_set_allocated:drivers.srr_radar.SrrRadarConf.radar_channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace srr_radar
}  // namespace drivers

// @@protoc_insertion_point(global_scope)
