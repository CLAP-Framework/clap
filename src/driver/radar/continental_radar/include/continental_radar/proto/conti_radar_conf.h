// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conti_radar_conf.proto

#ifndef PROTO_CONTI_RADAR_CONF_H_
#define PROTO_CONTI_RADAR_CONF_H_

#include <assert.h>
#include <cstring>
#include <cstdint>
#include <limits>
#include <string>
#include <vector>
#include <array>

namespace drivers {
namespace conti_radar {
class ContiRadarConf;
class RadarConf;
// class ContiRadarConfDefaultTypeInternal;
// extern ContiRadarConfDefaultTypeInternal _ContiRadarConf_default_instance_;
// class RadarConfDefaultTypeInternal;
// extern RadarConfDefaultTypeInternal _RadarConf_default_instance_;
}  // namespace conti_radar
}  // namespace drivers

namespace drivers {
namespace conti_radar {

enum OutputType : int {
  OUTPUT_TYPE_NONE = 0,
  OUTPUT_TYPE_OBJECTS = 1,
  OUTPUT_TYPE_CLUSTERS = 2,
  OUTPUT_TYPE_ERROR = 3
};

constexpr OutputType OutputType_MIN = OUTPUT_TYPE_NONE;
constexpr OutputType OutputType_MAX = OUTPUT_TYPE_ERROR;
constexpr int OutputType_ARRAYSIZE = OutputType_MAX + 1;

enum RcsThreshold : int {
  RCS_THRESHOLD_STANDARD = 0,
  RCS_THRESHOLD_HIGH_SENSITIVITY = 1,
  RCS_THRESHOLD_ERROR = 2
};

constexpr RcsThreshold RcsThreshold_MIN = RCS_THRESHOLD_STANDARD;
constexpr RcsThreshold RcsThreshold_MAX = RCS_THRESHOLD_ERROR;
constexpr int RcsThreshold_ARRAYSIZE = RcsThreshold_MAX + 1;

class RadarConf 
{
 public:
  RadarConf();
  virtual ~RadarConf();
  RadarConf(const RadarConf& from);
  inline RadarConf& operator=(const RadarConf& from)
  {
    has_bits_=(from.has_bits_);
    max_distance_valid_=(from.max_distance_valid_);
    sensor_id_valid_=(from.sensor_id_valid_);
    radar_power_valid_=(from.radar_power_valid_);
    sort_index_valid_=(from.sort_index_valid_);
    ctrl_relay_valid_=(from.ctrl_relay_valid_);
    sensor_id_=(from.sensor_id_);
    radar_power_=(from.radar_power_);
    ctrl_relay_=(from.ctrl_relay_);
    sort_index_=(from.sort_index_);
    rcs_threshold_=(from.rcs_threshold_);
    store_in_nvm_=(from.store_in_nvm_);
    output_type_valid_=(from.output_type_valid_);
    send_quality_valid_=(from.send_quality_valid_);
    send_ext_info_valid_=(from.send_ext_info_valid_);
    store_in_nvm_valid_=(from.store_in_nvm_valid_);
    max_distance_=(from.max_distance_);
    output_type_=(from.output_type_);
    rcs_threshold_valid_=(from.rcs_threshold_valid_);
    send_ext_info_=(from.send_ext_info_);
    send_quality_=(from.send_quality_);
    return *this;
  }

  public:

  bool has_max_distance_valid() const;
  void clear_max_distance_valid();
  bool max_distance_valid() const;
  void set_max_distance_valid(bool value);

  bool has_sensor_id_valid() const;
  void clear_sensor_id_valid();
  bool sensor_id_valid() const;
  void set_sensor_id_valid(bool value);

  bool has_radar_power_valid() const;
  void clear_radar_power_valid();
  bool radar_power_valid() const;
  void set_radar_power_valid(bool value);

  bool has_sort_index_valid() const;
  void clear_sort_index_valid();
  bool sort_index_valid() const;
  void set_sort_index_valid(bool value);

  bool has_ctrl_relay_valid() const;
  void clear_ctrl_relay_valid();
  bool ctrl_relay_valid() const;
  void set_ctrl_relay_valid(bool value);

  bool has_sensor_id() const;
  void clear_sensor_id();
  uint32_t sensor_id() const;
  void set_sensor_id(uint32_t value);

  bool has_radar_power() const;
  void clear_radar_power();
  uint32_t radar_power() const;
  void set_radar_power(uint32_t value);

  bool has_ctrl_relay() const;
  void clear_ctrl_relay();
  uint32_t ctrl_relay() const;
  void set_ctrl_relay(uint32_t value);

  bool has_sort_index() const;
  void clear_sort_index();
  uint32_t sort_index() const;
  void set_sort_index(uint32_t value);

  bool has_input_send_interval() const;
  void clear_input_send_interval();
  uint64_t input_send_interval() const;
  void set_input_send_interval(uint64_t value);

  bool has_rcs_threshold() const;
  void clear_rcs_threshold();
  drivers::conti_radar::RcsThreshold rcs_threshold() const;
  void set_rcs_threshold(drivers::conti_radar::RcsThreshold value);

  bool has_store_in_nvm() const;
  void clear_store_in_nvm();
  uint32_t store_in_nvm() const;
  void set_store_in_nvm(uint32_t value);

  bool has_output_type_valid() const;
  void clear_output_type_valid();
  bool output_type_valid() const;
  void set_output_type_valid(bool value);

  bool has_send_quality_valid() const;
  void clear_send_quality_valid();
  bool send_quality_valid() const;
  void set_send_quality_valid(bool value);

  bool has_send_ext_info_valid() const;
  void clear_send_ext_info_valid();
  bool send_ext_info_valid() const;
  void set_send_ext_info_valid(bool value);

  bool has_store_in_nvm_valid() const;
  void clear_store_in_nvm_valid();
  bool store_in_nvm_valid() const;
  void set_store_in_nvm_valid(bool value);

  bool has_max_distance() const;
  void clear_max_distance();
  uint32_t max_distance() const;
  void set_max_distance(uint32_t value);

  bool has_output_type() const;
  void clear_output_type();
  drivers::conti_radar::OutputType output_type() const;
  void set_output_type(drivers::conti_radar::OutputType value);

  bool has_rcs_threshold_valid() const;
  void clear_rcs_threshold_valid();
  bool rcs_threshold_valid() const;
  void set_rcs_threshold_valid(bool value);

  bool has_send_ext_info() const;
  void clear_send_ext_info();
  bool send_ext_info() const;
  void set_send_ext_info(bool value);

  bool has_send_quality() const;
  void clear_send_quality();
  bool send_quality() const;
  void set_send_quality(bool value);

 private:
  uint32_t has_bits_;
  bool max_distance_valid_;
  bool sensor_id_valid_;
  bool radar_power_valid_;
  bool sort_index_valid_;
  bool ctrl_relay_valid_;
  uint32_t sensor_id_;
  uint32_t radar_power_;
  uint32_t ctrl_relay_;
  uint32_t sort_index_;

  int rcs_threshold_;
  uint32_t store_in_nvm_;
  bool output_type_valid_;
  bool send_quality_valid_;
  bool send_ext_info_valid_;
  bool store_in_nvm_valid_;
  uint32_t max_distance_;
  int output_type_;
  bool rcs_threshold_valid_;
  bool send_ext_info_;
  bool send_quality_;
};
// -------------------------------------------------------------------

class ContiRadarConf 
{
 public:
  ContiRadarConf();
  virtual ~ContiRadarConf();
  ContiRadarConf(const ContiRadarConf& from);
  inline ContiRadarConf& operator=(const ContiRadarConf& from)
  {
    has_bits_ = from.has_bits_;
    radar_conf_ = new RadarConf(from.radar_conf());
    return *this;
  }

  bool has_radar_conf() const;
  void clear_radar_conf();
  const drivers::conti_radar::RadarConf& radar_conf() const;
  drivers::conti_radar::RadarConf* release_radar_conf();
  drivers::conti_radar::RadarConf* mutable_radar_conf();
  void set_allocated_radar_conf(drivers::conti_radar::RadarConf* radar_conf);

 private:
  uint32_t has_bits_;
  drivers::conti_radar::RadarConf* radar_conf_;

};

}  // namespace conti_radar
}  // namespace drivers

#endif  // PROTO_CONTI_RADAR_CONF_H_
