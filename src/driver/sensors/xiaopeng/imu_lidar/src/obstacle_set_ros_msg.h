// Generated by gencpp from file rs_perception/obstacle_set_ros_msg.msg
// DO NOT EDIT!


#ifndef RS_PERCEPTION_MESSAGE_OBSTACLE_SET_ROS_MSG_H
#define RS_PERCEPTION_MESSAGE_OBSTACLE_SET_ROS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include "obstacle_ros_msg.h"

namespace rs_perception
{
template <class ContainerAllocator>
struct obstacle_set_ros_msg_
{
  typedef obstacle_set_ros_msg_<ContainerAllocator> Type;

  obstacle_set_ros_msg_()
    : header()
    , obstcles()  {
    }
  obstacle_set_ros_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obstcles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >::other >  _obstcles_type;
  _obstcles_type obstcles;





  typedef boost::shared_ptr< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_set_ros_msg_

typedef ::rs_perception::obstacle_set_ros_msg_<std::allocator<void> > obstacle_set_ros_msg;

typedef boost::shared_ptr< ::rs_perception::obstacle_set_ros_msg > obstacle_set_ros_msgPtr;
typedef boost::shared_ptr< ::rs_perception::obstacle_set_ros_msg const> obstacle_set_ros_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rs_perception

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rs_perception': ['/home/wangbin/DEVELOP/rs_ws/src/rs_perception/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fdeee7436a30b659a253768ea00c576";
  }

  static const char* value(const ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fdeee7436a30b65ULL;
  static const uint64_t static_value2 = 0x9a253768ea00c576ULL;
};

template<class ContainerAllocator>
struct DataType< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rs_perception/obstacle_set_ros_msg";
  }

  static const char* value(const ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# percepted obstacle list, defined by ros message type\n\
\n\
Header                    header                   # standard ROS message header\n\
\n\
obstacle_ros_msg[] obstcles # perceted obstacle Array\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: rs_perception/obstacle_ros_msg\n\
# single perception, defined by ros message type\n\
\n\
# ============basic info============\n\
float64 timestamp # global timestamp in seconds.\n\
uint32 device_code # which device the obstacle is detected by.\n\
\n\
# ============basic detection info============\n\
int32 id  # obstacle detection ID, only valid for one frame, i.e., will be reinit every frame.\n\
geometry_msgs/Point anchor # stable anchor point of obstacle as the geometry center may varies dramatically since the sparsity of lidar points, you may use it instead of \"center\".\n\
geometry_msgs/Point geo_center # obstacle geometry center position in global coordinate in meters.\n\
geometry_msgs/Point geo_size # Size of obstacle bounding box. obstacle size, i.e., length = size[0]], width = size[1], height = size[2], lenght >= width.\n\
geometry_msgs/Vector3 geo_direction # obstacle normalized direction in global coordinate; when without tracking, it parallel to the length edge direction.\n\
geometry_msgs/Point[] polygon # corner points of the convex hull of the obstacle in global coordinate in meters.\n\
float32 detect_confidence # the confidence for the obstacle detection, classification is not required, 0~1, the greater, the higher probability for obstacle existence.\n\
# -----------supplementary detection info-------------\n\
geometry_msgs/Point nearest_point # nearest polygon corner point of obstacle to lidar\n\
geometry_msgs/Point left_point # clock-wise the leftmost point of the bostacle\n\
geometry_msgs/Point right_point # clock-wise the rightmost point of the bostacle\n\
float32 distance # the minimal distance between the lidar and the nearest point of obstacle\n\
float32 yaw # yaw angle of the obstacle location relative to the lidar coordinate.\n\
int32 point_num # points num of obstacle pointcloud.\n\
\n\
# ============classification info============\n\
int32 type  # obstacle type from classification module: 0 mmeans unknown, 1 means pedestrain, 2 means bicycle, 3 means car, 4 means truck/bus, 5 means very huge long cargo truck\n\
float32 type_confidence  # the confidence for the classification from classification module, 0~1, the greater, the better.\n\
float32[] latent_types # all the possible types that the object may belong to.\n\
\n\
# ============motion info============\n\
int32 motion_state # obstacle motion prediction: 0 means unknow, 1 means moving, 2 means static, 3 means stoped.\n\
\n\
# ============tracking info============\n\
bool is_track_converged  # obstacle tracking state: tracked succeed or not, if not, the tracking information is not reliable.\n\
int32 tracker_id  # obstacle tracking ID, valid accross frame sequence all the time.\n\
geometry_msgs/Vector3 velocity # obstacle velocity in global coordinate with unit m/s.\n\
float32[] velocity_cov # covariance of velocity\n\
float32 velocity_uncertainty # the uncertainty of the velocity\n\
geometry_msgs/Vector3 ave_velocity # averate velocity by a sequence, i.g. 10 frames.\n\
\n\
geometry_msgs/Vector3 acceleration # obstacle acceleration in global coordinate with unit m/s.\n\
float32[] acceleration_cov # covariance of acceleration\n\
float32 acceleration_uncertainty # the uncertainty of the acceleration\n\
geometry_msgs/Vector3 ave_acceleration # averate acceleration by a sequence, i.g. 10 frames.\n\
\n\
float32 angle_velocity # angular velocity with radian in global coordinate with unit rad/s.\n\
float32 angle_velocity_cov # covariance of angle velocity\n\
float32 angle_velocity_uncertainty # the uncertainty of the angle velocity\n\
float32 ave_angle_velocity # averate angle velocity by a sequence, i.g. 10 frames.\n\
\n\
float32 asso_quality # the association quality of current tracked obstacle when involved into a tracker, 0~1, the greater, the better.\n\
float32 tracker_quality # the estimated quality for the tracker that the obstacle belong to, 0~1, the greater, the better.\n\
float64 tracking_time # the total time for the obstacle been tracked since been first detected, including visible or shadowed in seconds.\n\
\n\
# ***************supplementary attributes*******************\n\
\n\
# ============dynamic detection info============\n\
# float32 dynamic_confidence # probability for a obstacle belong to dynamic object, 0~1, the greater, the more probability for the obstacle to be dynamic.\n\
# float32 foreground_confidence # probability for a obstacle belong to foreground object, 0~1, the greater, the more probability for the obstacle to be foreground.\n\
\n\
# -------------supplementary tracking info-------------\n\
# geometry_msgs/Vector3[] history_velocity # historical velocity for the obstacle when tracked in global coordinate, default is 15 frames.\n\
# geometry_msgs/Point[] trajectory # historical trajectory for the obstacle when tracked in global coordinate in meters, default is 15 frames.\n\
\n\
# ============origional pointcloud info============\n\
# geometry_msgs/Point[] pointcloud #original pointcloud of the obstacle in global coordinate in meters.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obstcles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstacle_set_ros_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rs_perception::obstacle_set_ros_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obstcles[]" << std::endl;
    for (size_t i = 0; i < v.obstcles.size(); ++i)
    {
      s << indent << "  obstcles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.obstcles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RS_PERCEPTION_MESSAGE_OBSTACLE_SET_ROS_MSG_H
