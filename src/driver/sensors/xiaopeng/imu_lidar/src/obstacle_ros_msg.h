// Generated by gencpp from file rs_perception/obstacle_ros_msg.msg
// DO NOT EDIT!


#ifndef RS_PERCEPTION_MESSAGE_OBSTACLE_ROS_MSG_H
#define RS_PERCEPTION_MESSAGE_OBSTACLE_ROS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace rs_perception
{
template <class ContainerAllocator>
struct obstacle_ros_msg_
{
  typedef obstacle_ros_msg_<ContainerAllocator> Type;

  obstacle_ros_msg_()
    : timestamp(0.0)
    , device_code(0)
    , id(0)
    , anchor()
    , geo_center()
    , geo_size()
    , geo_direction()
    , polygon()
    , detect_confidence(0.0)
    , nearest_point()
    , left_point()
    , right_point()
    , distance(0.0)
    , yaw(0.0)
    , point_num(0)
    , type(0)
    , type_confidence(0.0)
    , latent_types()
    , motion_state(0)
    , is_track_converged(false)
    , tracker_id(0)
    , velocity()
    , velocity_cov()
    , velocity_uncertainty(0.0)
    , ave_velocity()
    , acceleration()
    , acceleration_cov()
    , acceleration_uncertainty(0.0)
    , ave_acceleration()
    , angle_velocity(0.0)
    , angle_velocity_cov(0.0)
    , angle_velocity_uncertainty(0.0)
    , ave_angle_velocity(0.0)
    , asso_quality(0.0)
    , tracker_quality(0.0)
    , tracking_time(0.0)  {
    }
  obstacle_ros_msg_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , device_code(0)
    , id(0)
    , anchor(_alloc)
    , geo_center(_alloc)
    , geo_size(_alloc)
    , geo_direction(_alloc)
    , polygon(_alloc)
    , detect_confidence(0.0)
    , nearest_point(_alloc)
    , left_point(_alloc)
    , right_point(_alloc)
    , distance(0.0)
    , yaw(0.0)
    , point_num(0)
    , type(0)
    , type_confidence(0.0)
    , latent_types(_alloc)
    , motion_state(0)
    , is_track_converged(false)
    , tracker_id(0)
    , velocity(_alloc)
    , velocity_cov(_alloc)
    , velocity_uncertainty(0.0)
    , ave_velocity(_alloc)
    , acceleration(_alloc)
    , acceleration_cov(_alloc)
    , acceleration_uncertainty(0.0)
    , ave_acceleration(_alloc)
    , angle_velocity(0.0)
    , angle_velocity_cov(0.0)
    , angle_velocity_uncertainty(0.0)
    , ave_angle_velocity(0.0)
    , asso_quality(0.0)
    , tracker_quality(0.0)
    , tracking_time(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint32_t _device_code_type;
  _device_code_type device_code;

   typedef int32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _anchor_type;
  _anchor_type anchor;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _geo_center_type;
  _geo_center_type geo_center;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _geo_size_type;
  _geo_size_type geo_size;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _geo_direction_type;
  _geo_direction_type geo_direction;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _polygon_type;
  _polygon_type polygon;

   typedef float _detect_confidence_type;
  _detect_confidence_type detect_confidence;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _nearest_point_type;
  _nearest_point_type nearest_point;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _left_point_type;
  _left_point_type left_point;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _right_point_type;
  _right_point_type right_point;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef int32_t _point_num_type;
  _point_num_type point_num;

   typedef int32_t _type_type;
  _type_type type;

   typedef float _type_confidence_type;
  _type_confidence_type type_confidence;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _latent_types_type;
  _latent_types_type latent_types;

   typedef int32_t _motion_state_type;
  _motion_state_type motion_state;

   typedef uint8_t _is_track_converged_type;
  _is_track_converged_type is_track_converged;

   typedef int32_t _tracker_id_type;
  _tracker_id_type tracker_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _velocity_cov_type;
  _velocity_cov_type velocity_cov;

   typedef float _velocity_uncertainty_type;
  _velocity_uncertainty_type velocity_uncertainty;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ave_velocity_type;
  _ave_velocity_type ave_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _acceleration_cov_type;
  _acceleration_cov_type acceleration_cov;

   typedef float _acceleration_uncertainty_type;
  _acceleration_uncertainty_type acceleration_uncertainty;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ave_acceleration_type;
  _ave_acceleration_type ave_acceleration;

   typedef float _angle_velocity_type;
  _angle_velocity_type angle_velocity;

   typedef float _angle_velocity_cov_type;
  _angle_velocity_cov_type angle_velocity_cov;

   typedef float _angle_velocity_uncertainty_type;
  _angle_velocity_uncertainty_type angle_velocity_uncertainty;

   typedef float _ave_angle_velocity_type;
  _ave_angle_velocity_type ave_angle_velocity;

   typedef float _asso_quality_type;
  _asso_quality_type asso_quality;

   typedef float _tracker_quality_type;
  _tracker_quality_type tracker_quality;

   typedef double _tracking_time_type;
  _tracking_time_type tracking_time;





  typedef boost::shared_ptr< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_ros_msg_

typedef ::rs_perception::obstacle_ros_msg_<std::allocator<void> > obstacle_ros_msg;

typedef boost::shared_ptr< ::rs_perception::obstacle_ros_msg > obstacle_ros_msgPtr;
typedef boost::shared_ptr< ::rs_perception::obstacle_ros_msg const> obstacle_ros_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rs_perception::obstacle_ros_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rs_perception

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rs_perception': ['/home/wangbin/DEVELOP/rs_ws/src/rs_perception/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "101e84068b9ba0e4818c53c89a1a7467";
  }

  static const char* value(const ::rs_perception::obstacle_ros_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x101e84068b9ba0e4ULL;
  static const uint64_t static_value2 = 0x818c53c89a1a7467ULL;
};

template<class ContainerAllocator>
struct DataType< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rs_perception/obstacle_ros_msg";
  }

  static const char* value(const ::rs_perception::obstacle_ros_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# single perception, defined by ros message type\n\
\n\
# ============basic info============\n\
float64 timestamp # global timestamp in seconds.\n\
uint32 device_code # which device the obstacle is detected by.\n\
\n\
# ============basic detection info============\n\
int32 id  # obstacle detection ID, only valid for one frame, i.e., will be reinit every frame.\n\
geometry_msgs/Point anchor # stable anchor point of obstacle as the geometry center may varies dramatically since the sparsity of lidar points, you may use it instead of \"center\".\n\
geometry_msgs/Point geo_center # obstacle geometry center position in global coordinate in meters.\n\
geometry_msgs/Point geo_size # Size of obstacle bounding box. obstacle size, i.e., length = size[0]], width = size[1], height = size[2], lenght >= width.\n\
geometry_msgs/Vector3 geo_direction # obstacle normalized direction in global coordinate; when without tracking, it parallel to the length edge direction.\n\
geometry_msgs/Point[] polygon # corner points of the convex hull of the obstacle in global coordinate in meters.\n\
float32 detect_confidence # the confidence for the obstacle detection, classification is not required, 0~1, the greater, the higher probability for obstacle existence.\n\
# -----------supplementary detection info-------------\n\
geometry_msgs/Point nearest_point # nearest polygon corner point of obstacle to lidar\n\
geometry_msgs/Point left_point # clock-wise the leftmost point of the bostacle\n\
geometry_msgs/Point right_point # clock-wise the rightmost point of the bostacle\n\
float32 distance # the minimal distance between the lidar and the nearest point of obstacle\n\
float32 yaw # yaw angle of the obstacle location relative to the lidar coordinate.\n\
int32 point_num # points num of obstacle pointcloud.\n\
\n\
# ============classification info============\n\
int32 type  # obstacle type from classification module: 0 mmeans unknown, 1 means pedestrain, 2 means bicycle, 3 means car, 4 means truck/bus, 5 means very huge long cargo truck\n\
float32 type_confidence  # the confidence for the classification from classification module, 0~1, the greater, the better.\n\
float32[] latent_types # all the possible types that the object may belong to.\n\
\n\
# ============motion info============\n\
int32 motion_state # obstacle motion prediction: 0 means unknow, 1 means moving, 2 means static, 3 means stoped.\n\
\n\
# ============tracking info============\n\
bool is_track_converged  # obstacle tracking state: tracked succeed or not, if not, the tracking information is not reliable.\n\
int32 tracker_id  # obstacle tracking ID, valid accross frame sequence all the time.\n\
geometry_msgs/Vector3 velocity # obstacle velocity in global coordinate with unit m/s.\n\
float32[] velocity_cov # covariance of velocity\n\
float32 velocity_uncertainty # the uncertainty of the velocity\n\
geometry_msgs/Vector3 ave_velocity # averate velocity by a sequence, i.g. 10 frames.\n\
\n\
geometry_msgs/Vector3 acceleration # obstacle acceleration in global coordinate with unit m/s.\n\
float32[] acceleration_cov # covariance of acceleration\n\
float32 acceleration_uncertainty # the uncertainty of the acceleration\n\
geometry_msgs/Vector3 ave_acceleration # averate acceleration by a sequence, i.g. 10 frames.\n\
\n\
float32 angle_velocity # angular velocity with radian in global coordinate with unit rad/s.\n\
float32 angle_velocity_cov # covariance of angle velocity\n\
float32 angle_velocity_uncertainty # the uncertainty of the angle velocity\n\
float32 ave_angle_velocity # averate angle velocity by a sequence, i.g. 10 frames.\n\
\n\
float32 asso_quality # the association quality of current tracked obstacle when involved into a tracker, 0~1, the greater, the better.\n\
float32 tracker_quality # the estimated quality for the tracker that the obstacle belong to, 0~1, the greater, the better.\n\
float64 tracking_time # the total time for the obstacle been tracked since been first detected, including visible or shadowed in seconds.\n\
\n\
# ***************supplementary attributes*******************\n\
\n\
# ============dynamic detection info============\n\
# float32 dynamic_confidence # probability for a obstacle belong to dynamic object, 0~1, the greater, the more probability for the obstacle to be dynamic.\n\
# float32 foreground_confidence # probability for a obstacle belong to foreground object, 0~1, the greater, the more probability for the obstacle to be foreground.\n\
\n\
# -------------supplementary tracking info-------------\n\
# geometry_msgs/Vector3[] history_velocity # historical velocity for the obstacle when tracked in global coordinate, default is 15 frames.\n\
# geometry_msgs/Point[] trajectory # historical trajectory for the obstacle when tracked in global coordinate in meters, default is 15 frames.\n\
\n\
# ============origional pointcloud info============\n\
# geometry_msgs/Point[] pointcloud #original pointcloud of the obstacle in global coordinate in meters.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::rs_perception::obstacle_ros_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.device_code);
      stream.next(m.id);
      stream.next(m.anchor);
      stream.next(m.geo_center);
      stream.next(m.geo_size);
      stream.next(m.geo_direction);
      stream.next(m.polygon);
      stream.next(m.detect_confidence);
      stream.next(m.nearest_point);
      stream.next(m.left_point);
      stream.next(m.right_point);
      stream.next(m.distance);
      stream.next(m.yaw);
      stream.next(m.point_num);
      stream.next(m.type);
      stream.next(m.type_confidence);
      stream.next(m.latent_types);
      stream.next(m.motion_state);
      stream.next(m.is_track_converged);
      stream.next(m.tracker_id);
      stream.next(m.velocity);
      stream.next(m.velocity_cov);
      stream.next(m.velocity_uncertainty);
      stream.next(m.ave_velocity);
      stream.next(m.acceleration);
      stream.next(m.acceleration_cov);
      stream.next(m.acceleration_uncertainty);
      stream.next(m.ave_acceleration);
      stream.next(m.angle_velocity);
      stream.next(m.angle_velocity_cov);
      stream.next(m.angle_velocity_uncertainty);
      stream.next(m.ave_angle_velocity);
      stream.next(m.asso_quality);
      stream.next(m.tracker_quality);
      stream.next(m.tracking_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstacle_ros_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rs_perception::obstacle_ros_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rs_perception::obstacle_ros_msg_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "device_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.device_code);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "anchor: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.anchor);
    s << indent << "geo_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_center);
    s << indent << "geo_size: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_size);
    s << indent << "geo_direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_direction);
    s << indent << "polygon[]" << std::endl;
    for (size_t i = 0; i < v.polygon.size(); ++i)
    {
      s << indent << "  polygon[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.polygon[i]);
    }
    s << indent << "detect_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.detect_confidence);
    s << indent << "nearest_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.nearest_point);
    s << indent << "left_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.left_point);
    s << indent << "right_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.right_point);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "point_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.point_num);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "type_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.type_confidence);
    s << indent << "latent_types[]" << std::endl;
    for (size_t i = 0; i < v.latent_types.size(); ++i)
    {
      s << indent << "  latent_types[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.latent_types[i]);
    }
    s << indent << "motion_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_state);
    s << indent << "is_track_converged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_track_converged);
    s << indent << "tracker_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracker_id);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "velocity_cov[]" << std::endl;
    for (size_t i = 0; i < v.velocity_cov.size(); ++i)
    {
      s << indent << "  velocity_cov[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity_cov[i]);
    }
    s << indent << "velocity_uncertainty: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_uncertainty);
    s << indent << "ave_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ave_velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "acceleration_cov[]" << std::endl;
    for (size_t i = 0; i < v.acceleration_cov.size(); ++i)
    {
      s << indent << "  acceleration_cov[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acceleration_cov[i]);
    }
    s << indent << "acceleration_uncertainty: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_uncertainty);
    s << indent << "ave_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ave_acceleration);
    s << indent << "angle_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.angle_velocity);
    s << indent << "angle_velocity_cov: ";
    Printer<float>::stream(s, indent + "  ", v.angle_velocity_cov);
    s << indent << "angle_velocity_uncertainty: ";
    Printer<float>::stream(s, indent + "  ", v.angle_velocity_uncertainty);
    s << indent << "ave_angle_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.ave_angle_velocity);
    s << indent << "asso_quality: ";
    Printer<float>::stream(s, indent + "  ", v.asso_quality);
    s << indent << "tracker_quality: ";
    Printer<float>::stream(s, indent + "  ", v.tracker_quality);
    s << indent << "tracking_time: ";
    Printer<double>::stream(s, indent + "  ", v.tracking_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RS_PERCEPTION_MESSAGE_OBSTACLE_ROS_MSG_H
