#!/usr/bin/env python

import rospy

import numpy as np
from zzz_navigation_msgs.msg import MapString, Map, Lane, LanePoint
from nav_msgs.msg import Path
from zzz_driver_msgs.msg import RigidBodyStateStamped


def build_lane(r,lane_index,ego_x,ego_y):
    lane = Lane()
    cx = -0.4771
    cy = 0.1983
    lane.length = 2*np.pi*r

    ego_vehicle_angle =np.arctan2(ego_y-cy,ego_x-cx)

    for angle in (ego_vehicle_angle+np.linspace(-np.pi,np.pi,1000)):
        point = LanePoint()
        point.position.x
        point.position.y
        lane.central_path_points.append(point)

    return lane


def pose_callback(msg, publisher):
    ego_x = msg.state.pose.pose.position.x
    ego_y = msg.state.pose.pose.position.y
    static_map = Map()
    static_map.in_junction = False
    static_map.target_lane_index = 1
    lane_inside = build_lane(19.8,1,ego_x,ego_y)
    lane_outside = build_lane(23.5,0,ego_x,ego_y)

    static_map.lanes.append(lane_outside)
    static_map.lanes.append(lane_inside)

    publisher.publish(static_map)

if __name__ == "__main__":
    rospy.init_node("convert_topic")
    _local_map_publisher = rospy.Publisher("/zzz/navigation/local_static_map", Map, queue_size=1)
    _pose_subscriber = rospy.Subscriber("/zzz/navigation/ego_pose", RigidBodyStateStamped, pose_callback, _local_map_publisher)

    rospy.spin()
