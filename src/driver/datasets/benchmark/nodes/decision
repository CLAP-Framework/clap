#!/usr/bin/env python

import json

import rospy
from zzz_common.params import parse_private_args
from message_filters import ApproximateTimeSynchronizer, Subscriber

from zzz_perception_msgs.msg import TrackingBoxArray
from zzz_driver_datasets_benchmark.decision import DecisionBenchmark

class DecisionBenchmarkNode(object):
    def __init__(self):
        params = parse_private_args(
            perception_ground_truth_topic="",
            perception_result_topic="",
            command_with_ground_truth_topic="",
            command_with_perception_topic="",
            dynamic_map_with_ground_truth_topic="",
            dynamic_map_with_perception_topic=""
        )

        self._benchmark = DecisionBenchmark()
        self._synced_subscriber = ApproximateTimeSynchronizer([
            Subscriber(params.perception_ground_truth_topic, TrackingBoxArray),
            Subscriber(params.perception_result_topic, TrackingBoxArray),
            Subscriber(params.command_with_ground_truth_topic, TrackingBoxArray),
            Subscriber(params.command_with_perception_topic, TrackingBoxArray),
            Subscriber(params.dynamic_map_with_ground_truth_topic, TrackingBoxArray),
            Subscriber(params.dynamic_map_with_perception_topic, TrackingBoxArray),
        ], 5, 0.1)
        self._synced_subscriber.registerCallback(self.decision_callback)


    def decision_callback(self, gtbox, trbox, gtcmd, percmd, gtdmap, perdmap):
        rospy.logdebug("Received synced result")
        self._benchmark.add_frame(gtbox, trbox, gtcmd, percmd, gtdmap, perdmap)


    def save_results(self):
        with open("decision_results.json", "w") as jout:
            json.dump(dict(report=self._benchmark.report(), desc=self._benchmark.doc()),
                jout, sort_keys=True)

if __name__ == "__main__":

    rospy.init_node("decision", log_level=rospy.DEBUG)
    node = DecisionBenchmarkNode()
    rospy.on_shutdown(node.save_results)
    rospy.spin()
