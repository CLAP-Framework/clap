#!/usr/bin/env python

import json

import rospy
from message_filters import ApproximateTimeSynchronizer, Subscriber

from zzz_perception_msgs.msg import TrackingBoxArray
from zzz_driver_datasets_benchmark.tracking import TrackingBenchmark

class TrackingBenchmarkNode(object):
    def __init__(self,
        ground_truth_topic="/kitti/tracklets",
        result_topic="/zzz/perception/objects_tracked"):

        self._benchmark = TrackingBenchmark()
        self._synced_subscriber = ApproximateTimeSynchronizer([
            Subscriber(ground_truth_topic, TrackingBoxArray),
            Subscriber(result_topic, TrackingBoxArray)
        ], 5, 0.1)
        self._synced_subscriber.registerCallback(self.boxes_callback)

    def boxes_callback(self, gtbox, trbox):
        rospy.logdebug("Received synced result")
        self._benchmark.add_frame(gtbox, trbox)

    def save_results(self):
        with open("tracking_results.json", "w") as jout:
            json.dump(dict(report=self._benchmark.report(), desc=self._benchmark.doc()),
                jout, sort_keys=True)

if __name__ == "__main__":

    rospy.init_node("tracking", log_level=rospy.DEBUG)
    node = TrackingBenchmarkNode()
    rospy.on_shutdown(node.save_results)
    rospy.spin()
