#!/usr/bin/env python

import rospy

from zzz_common.params import parse_private_args
from zzz_perception_msgs.msg import TrackingBoxArray
from visualization_msgs.msg import MarkerArray
from zzz_visualization_rviz_box_visualizer.tracking import TrackingBoxVisualizer

# TODO: directly publish Marker message since we have id for each object
# TODO: Add option to publish message after rigid body transformation

class Node():
    def __init__(self):
        params = parse_private_args(
            input_topic="objects_tracked",
            output_topic="objects_visual",
            marker_namespace="/zzz/tracking",

            label_color=[255,255,255,1],
            box_color=[255,77,136,0.8],
            centroid_color=[255,255,102,0.8],
            arrow_color=[255,255,153,0.8],
            
            centroid_scale=0.5,
            label_scale=0.5,
            label_height=1,
            arrow_speed_scale=1,
            arrow_width=0.2,
            box_max_size=10
        )

        self._subscriber = rospy.Subscriber(params.pop("input_topic"), TrackingBoxArray, self.callback)
        self._publisher = rospy.Publisher(params.pop("output_topic"), MarkerArray, queue_size=1)
        self._visualizer = TrackingBoxVisualizer(**params)

    def callback(self, msg):
        self._publisher.publish(self._visualizer.visualize(msg))

if __name__ == "__main__":
    rospy.init_node("tracking_visualizer")
    node = Node()
    rospy.spin()
