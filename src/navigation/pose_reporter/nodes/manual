#!/usr/bin/env python

import numpy as np
import rospy
import tf.transformations as tft
import tf2_ros as tf2
import utm # utm is required

from zzz_common.params import parse_private_args
from zzz_common.kinematics import get_absolute_state
from zzz_driver_msgs.msg import RigidBodyStateStamped
from zzz_driver_msgs.utils import convert_odometry_to_state
from geometry_msgs.msg import TransformStamped
from nav_msgs.msg import Odometry
from sensor_msgs.msg import NavSatFix
from message_filters import ApproximateTimeSynchronizer, Subscriber

class Node(object):
    # TODO: add service callback to update map origin, this will update both self._map_origin and self._odom_translation
    # TODO: we don't have to guess for the origin of the map in Carla, but in a real car we need to get the starting point of a GPS
    def __init__(self):
        params = parse_private_args(
            odom_input_topic = "/zzz/perception/odometry",
            pose_output_topic = "ego_pose",
            gnss_input_topic = "/zzz/drivers/gnss",
            map_origin = [0, 0, 0], # [lon, lat, alt]
            odom_translatin = [0, 0, 0], # [x, y, z] in UTC
            odom_rotation = [0, 0, 0, 1], # [x, y, z, w]
            guess_from_start = False # Guess odom to map from the first message
        )

        self._tfbuffer = tf2.Buffer()
        self._tfreporter = tf2.TransformBroadcaster()
        self._tfupdate = False
        self._guess_from_start = params.guess_from_start

        self._map_origin = params.map_origin # GPS location of map origin. Map origin is (0,0,0) in local ENU frame
        self._odom_translation = params.odom_translatin # translation from map origin to odom start
        self._odom_rotation = params.odom_rotation # rotation from map axis (ENU) to odom start axis
        self._odom_subscriber = rospy.Subscriber(params.odom_input_topic, Odometry, self.odom_callback)
        self._pose_publisher = rospy.Publisher(params.pose_output_topic, RigidBodyStateStamped, queue_size=1)
        if self._guess_from_start:
            self._gnss_subscriber = [
                Subscriber(params.gnss_input_topic, NavSatFix),
                Subscriber(params.odom_input_topic, Odometry)
            ]
            self._gnss_synchronizer = ApproximateTimeSynchronizer(
                self._gnss_subscriber, 5, 0.1)
            self._gnss_synchronizer.registerCallback(self.gnss_callback)

    def gnss_callback(self, gnss, odom):
        map_proj = utm.from_latlon(self._map_origin[0], self._map_origin[1])
        gnss_proj = utm.from_latlon(gnss.longitude, gnss.latitude)
        # TODO: record covariance
        self._odom_translation = [
            gnss_proj[0] - map_proj[0], # East
            gnss_proj[1] - map_proj[1], # North
            gnss.altitude - self._map_origin[2] # Up
        ]
        self._odom_rotation = [ # Here we assume the orientation of IMU is aligned with world frame
            odom.pose.pose.orientation.x,
            odom.pose.pose.orientation.y,
            odom.pose.pose.orientation.z,
            odom.pose.pose.orientation.w
        ]
        
        # Unregister subscriber
        for sub in self._gnss_subscriber:
            sub.sub.unregister()

    def odom_callback(self, msg):
        if self._tfupdate:
            self._tfreporter.sendTransform(self.create_map_odom_transform())
            self._tfupdate = False
        
        # Transformation from odom frame to map is static
        odom_state = RigidBodyStateStamped()
        odom_state.header.frame_id = "map"
        odom_state.state.child_frame_id = "odom"

        odom_state.state.pose.pose.position.x = self._odom_translation[0]
        odom_state.state.pose.pose.position.y = self._odom_translation[1]
        odom_state.state.pose.pose.position.z = self._odom_translation[2]
        odom_state.state.pose.pose.orientation.x = self._odom_rotation[0]
        odom_state.state.pose.pose.orientation.y = self._odom_rotation[1]
        odom_state.state.pose.pose.orientation.z = self._odom_rotation[2]
        odom_state.state.pose.pose.orientation.w = self._odom_rotation[3]

        rel_state = convert_odometry_to_state(msg)
        state = get_absolute_state(rel_state, odom_state, check_frame=False)

        # transform ego_pose to fit carla world
        # Quaterion xyzw
        x = state.state.pose.pose.orientation.x
        y = state.state.pose.pose.orientation.y
        z = state.state.pose.pose.orientation.z
        w = state.state.pose.pose.orientation.w

        # get rotation matrix from Quaterion, and multiply it with linear velocity to get carla_world velocity
        rotation_mat = np.array([[1-2*y*y-2*z*z, 2*x*y+2*w*z, 2*x*z-2*w*y], [2*x*y-2*w*z, 1-2*x*x-2*z*z, 2*y*z+2*w*x], [2*x*z+2*w*y, 2*y*z-2*w*x, 1-2*x*x-2*y*y]])
        rotation_mat_inverse = np.linalg.inv(rotation_mat) #those are the correct way to deal with quaternion
        vel_self = np.array([[state.state.twist.twist.linear.x], [state.state.twist.twist.linear.y], [state.state.twist.twist.linear.z]])
        vel_world = np.matmul(rotation_mat_inverse, vel_self)

        state.state.twist.twist.linear.x = vel_world[0]
        state.state.twist.twist.linear.y = vel_world[1]
        state.state.twist.twist.linear.z = vel_world[2]

        rospy.logdebug("Position: %.3f, %.3f", state.state.pose.pose.position.x, state.state.pose.pose.position.y)
        
        self._pose_publisher.publish(state)

    def create_map_odom_transform(self):
        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = "world"
        transform.child_frame_id = "odom"
        transform.transform.translation.x = self._odom_translation[0]
        transform.transform.translation.y = self._odom_translation[1]
        transform.transform.translation.z = self._odom_translation[2]
        transform.transform.rotation.x = self._odom_rotation[0]
        transform.transform.rotation.y = self._odom_rotation[1]
        transform.transform.rotation.z = self._odom_rotation[2]
        transform.transform.rotation.w = self._odom_rotation[3]
        return transform

if __name__ == "__main__":
    rospy.init_node("pose_reporter", log_level=rospy.DEBUG)
    node = Node()
    rospy.spin()
